// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/lingfohn/lime/ent/helmconfig"
)

// HelmConfig is the model entity for the HelmConfig schema.
type HelmConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ChartVersion holds the value of the "chartVersion" field.
	ChartVersion string `json:"chartVersion"`
	// Active holds the value of the "active" field.
	Active string `json:"active"`
	// EnableService holds the value of the "enableService" field.
	EnableService bool `json:"enableService"`
	// ServiceType holds the value of the "serviceType" field.
	ServiceType string `json:"serviceType"`
	// NodePort holds the value of the "nodePort" field.
	NodePort int `json:"nodePort"`
	// LimitMem holds the value of the "limitMem" field.
	LimitMem string `json:"limitMem"`
	// LimitCPU holds the value of the "limitCPU" field.
	LimitCPU string `json:"limitCPU"`
	// ReqCPU holds the value of the "reqCPU" field.
	ReqCPU string `json:"reqCPU"`
	// ReqMem holds the value of the "reqMem" field.
	ReqMem string `json:"reqMem"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HelmConfig) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // chartVersion
		&sql.NullString{}, // active
		&sql.NullBool{},   // enableService
		&sql.NullString{}, // serviceType
		&sql.NullInt64{},  // nodePort
		&sql.NullString{}, // limitMem
		&sql.NullString{}, // limitCPU
		&sql.NullString{}, // reqCPU
		&sql.NullString{}, // reqMem
		&sql.NullTime{},   // createdAt
		&sql.NullTime{},   // updatedAt
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HelmConfig fields.
func (hc *HelmConfig) assignValues(values ...interface{}) error {
	if m, n := len(values), len(helmconfig.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	hc.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field chartVersion", values[0])
	} else if value.Valid {
		hc.ChartVersion = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field active", values[1])
	} else if value.Valid {
		hc.Active = value.String
	}
	if value, ok := values[2].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field enableService", values[2])
	} else if value.Valid {
		hc.EnableService = value.Bool
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field serviceType", values[3])
	} else if value.Valid {
		hc.ServiceType = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field nodePort", values[4])
	} else if value.Valid {
		hc.NodePort = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field limitMem", values[5])
	} else if value.Valid {
		hc.LimitMem = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field limitCPU", values[6])
	} else if value.Valid {
		hc.LimitCPU = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field reqCPU", values[7])
	} else if value.Valid {
		hc.ReqCPU = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field reqMem", values[8])
	} else if value.Valid {
		hc.ReqMem = value.String
	}
	if value, ok := values[9].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[9])
	} else if value.Valid {
		hc.CreatedAt = value.Time
	}
	if value, ok := values[10].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[10])
	} else if value.Valid {
		hc.UpdatedAt = value.Time
	}
	return nil
}

// Update returns a builder for updating this HelmConfig.
// Note that, you need to call HelmConfig.Unwrap() before calling this method, if this HelmConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (hc *HelmConfig) Update() *HelmConfigUpdateOne {
	return (&HelmConfigClient{config: hc.config}).UpdateOne(hc)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (hc *HelmConfig) Unwrap() *HelmConfig {
	tx, ok := hc.config.driver.(*txDriver)
	if !ok {
		panic("ent: HelmConfig is not a transactional entity")
	}
	hc.config.driver = tx.drv
	return hc
}

// String implements the fmt.Stringer.
func (hc *HelmConfig) String() string {
	var builder strings.Builder
	builder.WriteString("HelmConfig(")
	builder.WriteString(fmt.Sprintf("id=%v", hc.ID))
	builder.WriteString(", chartVersion=")
	builder.WriteString(hc.ChartVersion)
	builder.WriteString(", active=")
	builder.WriteString(hc.Active)
	builder.WriteString(", enableService=")
	builder.WriteString(fmt.Sprintf("%v", hc.EnableService))
	builder.WriteString(", serviceType=")
	builder.WriteString(hc.ServiceType)
	builder.WriteString(", nodePort=")
	builder.WriteString(fmt.Sprintf("%v", hc.NodePort))
	builder.WriteString(", limitMem=")
	builder.WriteString(hc.LimitMem)
	builder.WriteString(", limitCPU=")
	builder.WriteString(hc.LimitCPU)
	builder.WriteString(", reqCPU=")
	builder.WriteString(hc.ReqCPU)
	builder.WriteString(", reqMem=")
	builder.WriteString(hc.ReqMem)
	builder.WriteString(", createdAt=")
	builder.WriteString(hc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(hc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// HelmConfigs is a parsable slice of HelmConfig.
type HelmConfigs []*HelmConfig

func (hc HelmConfigs) config(cfg config) {
	for _i := range hc {
		hc[_i].config = cfg
	}
}
