// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/lingfohn/lime/ent/application"
	"github.com/lingfohn/lime/ent/helmconfig"
	"github.com/lingfohn/lime/ent/namespace"
	"github.com/lingfohn/lime/ent/project"
)

// Application is the model entity for the Application schema.
type Application struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Multi holds the value of the "multi" field.
	Multi bool `json:"multi"`
	// ProjectId holds the value of the "projectId" field.
	ProjectId int `json:"projectId"`
	// NamespaceId holds the value of the "namespaceId" field.
	NamespaceId int `json:"namespaceId"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApplicationQuery when eager-loading is set.
	Edges                  ApplicationEdges `json:"edges"`
	application_config     *int
	namespace_applications *int
	project_applications   *int
}

// ApplicationEdges holds the relations/edges for other nodes in the graph.
type ApplicationEdges struct {
	// Namespace holds the value of the namespace edge.
	Namespace *Namespace `json:"namespace,omitempty"`
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Instances holds the value of the instances edge.
	Instances []*Instance `json:"instances,omitempty"`
	// Config holds the value of the config edge.
	Config *HelmConfig `json:"config,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// NamespaceOrErr returns the Namespace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationEdges) NamespaceOrErr() (*Namespace, error) {
	if e.loadedTypes[0] {
		if e.Namespace == nil {
			// The edge namespace was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: namespace.Label}
		}
		return e.Namespace, nil
	}
	return nil, &NotLoadedError{edge: "namespace"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[1] {
		if e.Project == nil {
			// The edge project was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// InstancesOrErr returns the Instances value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicationEdges) InstancesOrErr() ([]*Instance, error) {
	if e.loadedTypes[2] {
		return e.Instances, nil
	}
	return nil, &NotLoadedError{edge: "instances"}
}

// ConfigOrErr returns the Config value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationEdges) ConfigOrErr() (*HelmConfig, error) {
	if e.loadedTypes[3] {
		if e.Config == nil {
			// The edge config was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: helmconfig.Label}
		}
		return e.Config, nil
	}
	return nil, &NotLoadedError{edge: "config"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Application) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullBool{},   // multi
		&sql.NullInt64{},  // projectId
		&sql.NullInt64{},  // namespaceId
		&sql.NullTime{},   // createdAt
		&sql.NullTime{},   // updatedAt
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Application) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // application_config
		&sql.NullInt64{}, // namespace_applications
		&sql.NullInt64{}, // project_applications
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Application fields.
func (a *Application) assignValues(values ...interface{}) error {
	if m, n := len(values), len(application.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		a.Name = value.String
	}
	if value, ok := values[1].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field multi", values[1])
	} else if value.Valid {
		a.Multi = value.Bool
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field projectId", values[2])
	} else if value.Valid {
		a.ProjectId = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field namespaceId", values[3])
	} else if value.Valid {
		a.NamespaceId = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[4])
	} else if value.Valid {
		a.CreatedAt = value.Time
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[5])
	} else if value.Valid {
		a.UpdatedAt = value.Time
	}
	values = values[6:]
	if len(values) == len(application.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field application_config", value)
		} else if value.Valid {
			a.application_config = new(int)
			*a.application_config = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field namespace_applications", value)
		} else if value.Valid {
			a.namespace_applications = new(int)
			*a.namespace_applications = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field project_applications", value)
		} else if value.Valid {
			a.project_applications = new(int)
			*a.project_applications = int(value.Int64)
		}
	}
	return nil
}

// QueryNamespace queries the namespace edge of the Application.
func (a *Application) QueryNamespace() *NamespaceQuery {
	return (&ApplicationClient{config: a.config}).QueryNamespace(a)
}

// QueryProject queries the project edge of the Application.
func (a *Application) QueryProject() *ProjectQuery {
	return (&ApplicationClient{config: a.config}).QueryProject(a)
}

// QueryInstances queries the instances edge of the Application.
func (a *Application) QueryInstances() *InstanceQuery {
	return (&ApplicationClient{config: a.config}).QueryInstances(a)
}

// QueryConfig queries the config edge of the Application.
func (a *Application) QueryConfig() *HelmConfigQuery {
	return (&ApplicationClient{config: a.config}).QueryConfig(a)
}

// Update returns a builder for updating this Application.
// Note that, you need to call Application.Unwrap() before calling this method, if this Application
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Application) Update() *ApplicationUpdateOne {
	return (&ApplicationClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Application) Unwrap() *Application {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Application is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Application) String() string {
	var builder strings.Builder
	builder.WriteString("Application(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteString(", multi=")
	builder.WriteString(fmt.Sprintf("%v", a.Multi))
	builder.WriteString(", projectId=")
	builder.WriteString(fmt.Sprintf("%v", a.ProjectId))
	builder.WriteString(", namespaceId=")
	builder.WriteString(fmt.Sprintf("%v", a.NamespaceId))
	builder.WriteString(", createdAt=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Applications is a parsable slice of Application.
type Applications []*Application

func (a Applications) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
