// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/lingfohn/lime/ent/application"
	"github.com/lingfohn/lime/ent/helmconfig"
	"github.com/lingfohn/lime/ent/instance"
	"github.com/lingfohn/lime/ent/namespace"
	"github.com/lingfohn/lime/ent/predicate"
	"github.com/lingfohn/lime/ent/project"
)

// ApplicationUpdate is the builder for updating Application entities.
type ApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationMutation
}

// Where adds a new predicate for the builder.
func (au *ApplicationUpdate) Where(ps ...predicate.Application) *ApplicationUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetName sets the name field.
func (au *ApplicationUpdate) SetName(s string) *ApplicationUpdate {
	au.mutation.SetName(s)
	return au
}

// SetMulti sets the multi field.
func (au *ApplicationUpdate) SetMulti(b bool) *ApplicationUpdate {
	au.mutation.SetMulti(b)
	return au
}

// SetNillableMulti sets the multi field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableMulti(b *bool) *ApplicationUpdate {
	if b != nil {
		au.SetMulti(*b)
	}
	return au
}

// SetProjectId sets the projectId field.
func (au *ApplicationUpdate) SetProjectId(i int) *ApplicationUpdate {
	au.mutation.ResetProjectId()
	au.mutation.SetProjectId(i)
	return au
}

// AddProjectId adds i to projectId.
func (au *ApplicationUpdate) AddProjectId(i int) *ApplicationUpdate {
	au.mutation.AddProjectId(i)
	return au
}

// SetNamespaceId sets the namespaceId field.
func (au *ApplicationUpdate) SetNamespaceId(i int) *ApplicationUpdate {
	au.mutation.ResetNamespaceId()
	au.mutation.SetNamespaceId(i)
	return au
}

// AddNamespaceId adds i to namespaceId.
func (au *ApplicationUpdate) AddNamespaceId(i int) *ApplicationUpdate {
	au.mutation.AddNamespaceId(i)
	return au
}

// SetUpdatedAt sets the updatedAt field.
func (au *ApplicationUpdate) SetUpdatedAt(t time.Time) *ApplicationUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNamespaceID sets the namespace edge to Namespace by id.
func (au *ApplicationUpdate) SetNamespaceID(id int) *ApplicationUpdate {
	au.mutation.SetNamespaceID(id)
	return au
}

// SetNillableNamespaceID sets the namespace edge to Namespace by id if the given value is not nil.
func (au *ApplicationUpdate) SetNillableNamespaceID(id *int) *ApplicationUpdate {
	if id != nil {
		au = au.SetNamespaceID(*id)
	}
	return au
}

// SetNamespace sets the namespace edge to Namespace.
func (au *ApplicationUpdate) SetNamespace(n *Namespace) *ApplicationUpdate {
	return au.SetNamespaceID(n.ID)
}

// SetProjectID sets the project edge to Project by id.
func (au *ApplicationUpdate) SetProjectID(id int) *ApplicationUpdate {
	au.mutation.SetProjectID(id)
	return au
}

// SetNillableProjectID sets the project edge to Project by id if the given value is not nil.
func (au *ApplicationUpdate) SetNillableProjectID(id *int) *ApplicationUpdate {
	if id != nil {
		au = au.SetProjectID(*id)
	}
	return au
}

// SetProject sets the project edge to Project.
func (au *ApplicationUpdate) SetProject(p *Project) *ApplicationUpdate {
	return au.SetProjectID(p.ID)
}

// AddInstanceIDs adds the instances edge to Instance by ids.
func (au *ApplicationUpdate) AddInstanceIDs(ids ...int) *ApplicationUpdate {
	au.mutation.AddInstanceIDs(ids...)
	return au
}

// AddInstances adds the instances edges to Instance.
func (au *ApplicationUpdate) AddInstances(i ...*Instance) *ApplicationUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return au.AddInstanceIDs(ids...)
}

// SetConfigID sets the config edge to HelmConfig by id.
func (au *ApplicationUpdate) SetConfigID(id int) *ApplicationUpdate {
	au.mutation.SetConfigID(id)
	return au
}

// SetNillableConfigID sets the config edge to HelmConfig by id if the given value is not nil.
func (au *ApplicationUpdate) SetNillableConfigID(id *int) *ApplicationUpdate {
	if id != nil {
		au = au.SetConfigID(*id)
	}
	return au
}

// SetConfig sets the config edge to HelmConfig.
func (au *ApplicationUpdate) SetConfig(h *HelmConfig) *ApplicationUpdate {
	return au.SetConfigID(h.ID)
}

// Mutation returns the ApplicationMutation object of the builder.
func (au *ApplicationUpdate) Mutation() *ApplicationMutation {
	return au.mutation
}

// ClearNamespace clears the "namespace" edge to type Namespace.
func (au *ApplicationUpdate) ClearNamespace() *ApplicationUpdate {
	au.mutation.ClearNamespace()
	return au
}

// ClearProject clears the "project" edge to type Project.
func (au *ApplicationUpdate) ClearProject() *ApplicationUpdate {
	au.mutation.ClearProject()
	return au
}

// ClearInstances clears all "instances" edges to type Instance.
func (au *ApplicationUpdate) ClearInstances() *ApplicationUpdate {
	au.mutation.ClearInstances()
	return au
}

// RemoveInstanceIDs removes the instances edge to Instance by ids.
func (au *ApplicationUpdate) RemoveInstanceIDs(ids ...int) *ApplicationUpdate {
	au.mutation.RemoveInstanceIDs(ids...)
	return au
}

// RemoveInstances removes instances edges to Instance.
func (au *ApplicationUpdate) RemoveInstances(i ...*Instance) *ApplicationUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return au.RemoveInstanceIDs(ids...)
}

// ClearConfig clears the "config" edge to type HelmConfig.
func (au *ApplicationUpdate) ClearConfig() *ApplicationUpdate {
	au.mutation.ClearConfig()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ApplicationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApplicationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ApplicationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ApplicationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ApplicationUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := application.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *ApplicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   application.Table,
			Columns: application.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: application.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldName,
		})
	}
	if value, ok := au.mutation.Multi(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: application.FieldMulti,
		})
	}
	if value, ok := au.mutation.ProjectId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: application.FieldProjectId,
		})
	}
	if value, ok := au.mutation.AddedProjectId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: application.FieldProjectId,
		})
	}
	if value, ok := au.mutation.NamespaceId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: application.FieldNamespaceId,
		})
	}
	if value, ok := au.mutation.AddedNamespaceId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: application.FieldNamespaceId,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: application.FieldUpdatedAt,
		})
	}
	if au.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.NamespaceTable,
			Columns: []string{application.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: namespace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.NamespaceTable,
			Columns: []string{application.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ProjectTable,
			Columns: []string{application.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ProjectTable,
			Columns: []string{application.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.InstancesTable,
			Columns: []string{application.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !au.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.InstancesTable,
			Columns: []string{application.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.InstancesTable,
			Columns: []string{application.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   application.ConfigTable,
			Columns: []string{application.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: helmconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   application.ConfigTable,
			Columns: []string{application.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: helmconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ApplicationUpdateOne is the builder for updating a single Application entity.
type ApplicationUpdateOne struct {
	config
	hooks    []Hook
	mutation *ApplicationMutation
}

// SetName sets the name field.
func (auo *ApplicationUpdateOne) SetName(s string) *ApplicationUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetMulti sets the multi field.
func (auo *ApplicationUpdateOne) SetMulti(b bool) *ApplicationUpdateOne {
	auo.mutation.SetMulti(b)
	return auo
}

// SetNillableMulti sets the multi field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableMulti(b *bool) *ApplicationUpdateOne {
	if b != nil {
		auo.SetMulti(*b)
	}
	return auo
}

// SetProjectId sets the projectId field.
func (auo *ApplicationUpdateOne) SetProjectId(i int) *ApplicationUpdateOne {
	auo.mutation.ResetProjectId()
	auo.mutation.SetProjectId(i)
	return auo
}

// AddProjectId adds i to projectId.
func (auo *ApplicationUpdateOne) AddProjectId(i int) *ApplicationUpdateOne {
	auo.mutation.AddProjectId(i)
	return auo
}

// SetNamespaceId sets the namespaceId field.
func (auo *ApplicationUpdateOne) SetNamespaceId(i int) *ApplicationUpdateOne {
	auo.mutation.ResetNamespaceId()
	auo.mutation.SetNamespaceId(i)
	return auo
}

// AddNamespaceId adds i to namespaceId.
func (auo *ApplicationUpdateOne) AddNamespaceId(i int) *ApplicationUpdateOne {
	auo.mutation.AddNamespaceId(i)
	return auo
}

// SetUpdatedAt sets the updatedAt field.
func (auo *ApplicationUpdateOne) SetUpdatedAt(t time.Time) *ApplicationUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNamespaceID sets the namespace edge to Namespace by id.
func (auo *ApplicationUpdateOne) SetNamespaceID(id int) *ApplicationUpdateOne {
	auo.mutation.SetNamespaceID(id)
	return auo
}

// SetNillableNamespaceID sets the namespace edge to Namespace by id if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableNamespaceID(id *int) *ApplicationUpdateOne {
	if id != nil {
		auo = auo.SetNamespaceID(*id)
	}
	return auo
}

// SetNamespace sets the namespace edge to Namespace.
func (auo *ApplicationUpdateOne) SetNamespace(n *Namespace) *ApplicationUpdateOne {
	return auo.SetNamespaceID(n.ID)
}

// SetProjectID sets the project edge to Project by id.
func (auo *ApplicationUpdateOne) SetProjectID(id int) *ApplicationUpdateOne {
	auo.mutation.SetProjectID(id)
	return auo
}

// SetNillableProjectID sets the project edge to Project by id if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableProjectID(id *int) *ApplicationUpdateOne {
	if id != nil {
		auo = auo.SetProjectID(*id)
	}
	return auo
}

// SetProject sets the project edge to Project.
func (auo *ApplicationUpdateOne) SetProject(p *Project) *ApplicationUpdateOne {
	return auo.SetProjectID(p.ID)
}

// AddInstanceIDs adds the instances edge to Instance by ids.
func (auo *ApplicationUpdateOne) AddInstanceIDs(ids ...int) *ApplicationUpdateOne {
	auo.mutation.AddInstanceIDs(ids...)
	return auo
}

// AddInstances adds the instances edges to Instance.
func (auo *ApplicationUpdateOne) AddInstances(i ...*Instance) *ApplicationUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return auo.AddInstanceIDs(ids...)
}

// SetConfigID sets the config edge to HelmConfig by id.
func (auo *ApplicationUpdateOne) SetConfigID(id int) *ApplicationUpdateOne {
	auo.mutation.SetConfigID(id)
	return auo
}

// SetNillableConfigID sets the config edge to HelmConfig by id if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableConfigID(id *int) *ApplicationUpdateOne {
	if id != nil {
		auo = auo.SetConfigID(*id)
	}
	return auo
}

// SetConfig sets the config edge to HelmConfig.
func (auo *ApplicationUpdateOne) SetConfig(h *HelmConfig) *ApplicationUpdateOne {
	return auo.SetConfigID(h.ID)
}

// Mutation returns the ApplicationMutation object of the builder.
func (auo *ApplicationUpdateOne) Mutation() *ApplicationMutation {
	return auo.mutation
}

// ClearNamespace clears the "namespace" edge to type Namespace.
func (auo *ApplicationUpdateOne) ClearNamespace() *ApplicationUpdateOne {
	auo.mutation.ClearNamespace()
	return auo
}

// ClearProject clears the "project" edge to type Project.
func (auo *ApplicationUpdateOne) ClearProject() *ApplicationUpdateOne {
	auo.mutation.ClearProject()
	return auo
}

// ClearInstances clears all "instances" edges to type Instance.
func (auo *ApplicationUpdateOne) ClearInstances() *ApplicationUpdateOne {
	auo.mutation.ClearInstances()
	return auo
}

// RemoveInstanceIDs removes the instances edge to Instance by ids.
func (auo *ApplicationUpdateOne) RemoveInstanceIDs(ids ...int) *ApplicationUpdateOne {
	auo.mutation.RemoveInstanceIDs(ids...)
	return auo
}

// RemoveInstances removes instances edges to Instance.
func (auo *ApplicationUpdateOne) RemoveInstances(i ...*Instance) *ApplicationUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return auo.RemoveInstanceIDs(ids...)
}

// ClearConfig clears the "config" edge to type HelmConfig.
func (auo *ApplicationUpdateOne) ClearConfig() *ApplicationUpdateOne {
	auo.mutation.ClearConfig()
	return auo
}

// Save executes the query and returns the updated entity.
func (auo *ApplicationUpdateOne) Save(ctx context.Context) (*Application, error) {
	var (
		err  error
		node *Application
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApplicationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ApplicationUpdateOne) SaveX(ctx context.Context) *Application {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ApplicationUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := application.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *ApplicationUpdateOne) sqlSave(ctx context.Context) (_node *Application, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   application.Table,
			Columns: application.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: application.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Application.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldName,
		})
	}
	if value, ok := auo.mutation.Multi(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: application.FieldMulti,
		})
	}
	if value, ok := auo.mutation.ProjectId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: application.FieldProjectId,
		})
	}
	if value, ok := auo.mutation.AddedProjectId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: application.FieldProjectId,
		})
	}
	if value, ok := auo.mutation.NamespaceId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: application.FieldNamespaceId,
		})
	}
	if value, ok := auo.mutation.AddedNamespaceId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: application.FieldNamespaceId,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: application.FieldUpdatedAt,
		})
	}
	if auo.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.NamespaceTable,
			Columns: []string{application.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: namespace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.NamespaceTable,
			Columns: []string{application.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ProjectTable,
			Columns: []string{application.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ProjectTable,
			Columns: []string{application.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.InstancesTable,
			Columns: []string{application.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !auo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.InstancesTable,
			Columns: []string{application.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.InstancesTable,
			Columns: []string{application.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   application.ConfigTable,
			Columns: []string{application.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: helmconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   application.ConfigTable,
			Columns: []string{application.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: helmconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Application{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
