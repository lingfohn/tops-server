// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/lingfohn/lime/ent/application"
	"github.com/lingfohn/lime/ent/build"
	"github.com/lingfohn/lime/ent/helmconfig"
	"github.com/lingfohn/lime/ent/instance"
)

// InstanceCreate is the builder for creating a Instance entity.
type InstanceCreate struct {
	config
	mutation *InstanceMutation
	hooks    []Hook
}

// SetName sets the name field.
func (ic *InstanceCreate) SetName(s string) *InstanceCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetApplicationID sets the application edge to Application by id.
func (ic *InstanceCreate) SetApplicationID(id int) *InstanceCreate {
	ic.mutation.SetApplicationID(id)
	return ic
}

// SetNillableApplicationID sets the application edge to Application by id if the given value is not nil.
func (ic *InstanceCreate) SetNillableApplicationID(id *int) *InstanceCreate {
	if id != nil {
		ic = ic.SetApplicationID(*id)
	}
	return ic
}

// SetApplication sets the application edge to Application.
func (ic *InstanceCreate) SetApplication(a *Application) *InstanceCreate {
	return ic.SetApplicationID(a.ID)
}

// AddBuildIDs adds the builds edge to Build by ids.
func (ic *InstanceCreate) AddBuildIDs(ids ...int) *InstanceCreate {
	ic.mutation.AddBuildIDs(ids...)
	return ic
}

// AddBuilds adds the builds edges to Build.
func (ic *InstanceCreate) AddBuilds(b ...*Build) *InstanceCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ic.AddBuildIDs(ids...)
}

// SetConfigID sets the config edge to HelmConfig by id.
func (ic *InstanceCreate) SetConfigID(id int) *InstanceCreate {
	ic.mutation.SetConfigID(id)
	return ic
}

// SetNillableConfigID sets the config edge to HelmConfig by id if the given value is not nil.
func (ic *InstanceCreate) SetNillableConfigID(id *int) *InstanceCreate {
	if id != nil {
		ic = ic.SetConfigID(*id)
	}
	return ic
}

// SetConfig sets the config edge to HelmConfig.
func (ic *InstanceCreate) SetConfig(h *HelmConfig) *InstanceCreate {
	return ic.SetConfigID(h.ID)
}

// Save creates the Instance in the database.
func (ic *InstanceCreate) Save(ctx context.Context) (*Instance, error) {
	if _, ok := ic.mutation.Name(); !ok {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	var (
		err  error
		node *Instance
	)
	if len(ic.hooks) == 0 {
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ic.mutation = mutation
			node, err = ic.sqlSave(ctx)
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InstanceCreate) SaveX(ctx context.Context) *Instance {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ic *InstanceCreate) sqlSave(ctx context.Context) (*Instance, error) {
	var (
		i     = &Instance{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: instance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: instance.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instance.FieldName,
		})
		i.Name = value
	}
	if nodes := ic.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instance.ApplicationTable,
			Columns: []string{instance.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.BuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instance.BuildsTable,
			Columns: []string{instance.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instance.ConfigTable,
			Columns: []string{instance.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: helmconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	i.ID = int(id)
	return i, nil
}
