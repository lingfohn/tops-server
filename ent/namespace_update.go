// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/lingfohn/lime/ent/application"
	"github.com/lingfohn/lime/ent/k8scluster"
	"github.com/lingfohn/lime/ent/namespace"
	"github.com/lingfohn/lime/ent/predicate"
)

// NamespaceUpdate is the builder for updating Namespace entities.
type NamespaceUpdate struct {
	config
	hooks    []Hook
	mutation *NamespaceMutation
}

// Where adds a new predicate for the builder.
func (nu *NamespaceUpdate) Where(ps ...predicate.Namespace) *NamespaceUpdate {
	nu.mutation.predicates = append(nu.mutation.predicates, ps...)
	return nu
}

// SetName sets the name field.
func (nu *NamespaceUpdate) SetName(s string) *NamespaceUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetDockerRepo sets the dockerRepo field.
func (nu *NamespaceUpdate) SetDockerRepo(s string) *NamespaceUpdate {
	nu.mutation.SetDockerRepo(s)
	return nu
}

// SetRepoNamespace sets the repoNamespace field.
func (nu *NamespaceUpdate) SetRepoNamespace(s string) *NamespaceUpdate {
	nu.mutation.SetRepoNamespace(s)
	return nu
}

// SetActive sets the active field.
func (nu *NamespaceUpdate) SetActive(s string) *NamespaceUpdate {
	nu.mutation.SetActive(s)
	return nu
}

// SetUpdatedAt sets the updatedAt field.
func (nu *NamespaceUpdate) SetUpdatedAt(t time.Time) *NamespaceUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetClusterID sets the cluster edge to K8sCluster by id.
func (nu *NamespaceUpdate) SetClusterID(id int) *NamespaceUpdate {
	nu.mutation.SetClusterID(id)
	return nu
}

// SetNillableClusterID sets the cluster edge to K8sCluster by id if the given value is not nil.
func (nu *NamespaceUpdate) SetNillableClusterID(id *int) *NamespaceUpdate {
	if id != nil {
		nu = nu.SetClusterID(*id)
	}
	return nu
}

// SetCluster sets the cluster edge to K8sCluster.
func (nu *NamespaceUpdate) SetCluster(k *K8sCluster) *NamespaceUpdate {
	return nu.SetClusterID(k.ID)
}

// AddApplicationIDs adds the applications edge to Application by ids.
func (nu *NamespaceUpdate) AddApplicationIDs(ids ...int) *NamespaceUpdate {
	nu.mutation.AddApplicationIDs(ids...)
	return nu
}

// AddApplications adds the applications edges to Application.
func (nu *NamespaceUpdate) AddApplications(a ...*Application) *NamespaceUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nu.AddApplicationIDs(ids...)
}

// Mutation returns the NamespaceMutation object of the builder.
func (nu *NamespaceUpdate) Mutation() *NamespaceMutation {
	return nu.mutation
}

// ClearCluster clears the "cluster" edge to type K8sCluster.
func (nu *NamespaceUpdate) ClearCluster() *NamespaceUpdate {
	nu.mutation.ClearCluster()
	return nu
}

// ClearApplications clears all "applications" edges to type Application.
func (nu *NamespaceUpdate) ClearApplications() *NamespaceUpdate {
	nu.mutation.ClearApplications()
	return nu
}

// RemoveApplicationIDs removes the applications edge to Application by ids.
func (nu *NamespaceUpdate) RemoveApplicationIDs(ids ...int) *NamespaceUpdate {
	nu.mutation.RemoveApplicationIDs(ids...)
	return nu
}

// RemoveApplications removes applications edges to Application.
func (nu *NamespaceUpdate) RemoveApplications(a ...*Application) *NamespaceUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nu.RemoveApplicationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NamespaceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	nu.defaults()
	if len(nu.hooks) == 0 {
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NamespaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NamespaceUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NamespaceUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NamespaceUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NamespaceUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := namespace.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

func (nu *NamespaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   namespace.Table,
			Columns: namespace.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: namespace.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: namespace.FieldName,
		})
	}
	if value, ok := nu.mutation.DockerRepo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: namespace.FieldDockerRepo,
		})
	}
	if value, ok := nu.mutation.RepoNamespace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: namespace.FieldRepoNamespace,
		})
	}
	if value, ok := nu.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: namespace.FieldActive,
		})
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: namespace.FieldUpdatedAt,
		})
	}
	if nu.mutation.ClusterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   namespace.ClusterTable,
			Columns: []string{namespace.ClusterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: k8scluster.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ClusterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   namespace.ClusterTable,
			Columns: []string{namespace.ClusterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: k8scluster.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ApplicationsTable,
			Columns: []string{namespace.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: application.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !nu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ApplicationsTable,
			Columns: []string{namespace.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ApplicationsTable,
			Columns: []string{namespace.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{namespace.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NamespaceUpdateOne is the builder for updating a single Namespace entity.
type NamespaceUpdateOne struct {
	config
	hooks    []Hook
	mutation *NamespaceMutation
}

// SetName sets the name field.
func (nuo *NamespaceUpdateOne) SetName(s string) *NamespaceUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetDockerRepo sets the dockerRepo field.
func (nuo *NamespaceUpdateOne) SetDockerRepo(s string) *NamespaceUpdateOne {
	nuo.mutation.SetDockerRepo(s)
	return nuo
}

// SetRepoNamespace sets the repoNamespace field.
func (nuo *NamespaceUpdateOne) SetRepoNamespace(s string) *NamespaceUpdateOne {
	nuo.mutation.SetRepoNamespace(s)
	return nuo
}

// SetActive sets the active field.
func (nuo *NamespaceUpdateOne) SetActive(s string) *NamespaceUpdateOne {
	nuo.mutation.SetActive(s)
	return nuo
}

// SetUpdatedAt sets the updatedAt field.
func (nuo *NamespaceUpdateOne) SetUpdatedAt(t time.Time) *NamespaceUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetClusterID sets the cluster edge to K8sCluster by id.
func (nuo *NamespaceUpdateOne) SetClusterID(id int) *NamespaceUpdateOne {
	nuo.mutation.SetClusterID(id)
	return nuo
}

// SetNillableClusterID sets the cluster edge to K8sCluster by id if the given value is not nil.
func (nuo *NamespaceUpdateOne) SetNillableClusterID(id *int) *NamespaceUpdateOne {
	if id != nil {
		nuo = nuo.SetClusterID(*id)
	}
	return nuo
}

// SetCluster sets the cluster edge to K8sCluster.
func (nuo *NamespaceUpdateOne) SetCluster(k *K8sCluster) *NamespaceUpdateOne {
	return nuo.SetClusterID(k.ID)
}

// AddApplicationIDs adds the applications edge to Application by ids.
func (nuo *NamespaceUpdateOne) AddApplicationIDs(ids ...int) *NamespaceUpdateOne {
	nuo.mutation.AddApplicationIDs(ids...)
	return nuo
}

// AddApplications adds the applications edges to Application.
func (nuo *NamespaceUpdateOne) AddApplications(a ...*Application) *NamespaceUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nuo.AddApplicationIDs(ids...)
}

// Mutation returns the NamespaceMutation object of the builder.
func (nuo *NamespaceUpdateOne) Mutation() *NamespaceMutation {
	return nuo.mutation
}

// ClearCluster clears the "cluster" edge to type K8sCluster.
func (nuo *NamespaceUpdateOne) ClearCluster() *NamespaceUpdateOne {
	nuo.mutation.ClearCluster()
	return nuo
}

// ClearApplications clears all "applications" edges to type Application.
func (nuo *NamespaceUpdateOne) ClearApplications() *NamespaceUpdateOne {
	nuo.mutation.ClearApplications()
	return nuo
}

// RemoveApplicationIDs removes the applications edge to Application by ids.
func (nuo *NamespaceUpdateOne) RemoveApplicationIDs(ids ...int) *NamespaceUpdateOne {
	nuo.mutation.RemoveApplicationIDs(ids...)
	return nuo
}

// RemoveApplications removes applications edges to Application.
func (nuo *NamespaceUpdateOne) RemoveApplications(a ...*Application) *NamespaceUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nuo.RemoveApplicationIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (nuo *NamespaceUpdateOne) Save(ctx context.Context) (*Namespace, error) {
	var (
		err  error
		node *Namespace
	)
	nuo.defaults()
	if len(nuo.hooks) == 0 {
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NamespaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			mut = nuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NamespaceUpdateOne) SaveX(ctx context.Context) *Namespace {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NamespaceUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NamespaceUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NamespaceUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := namespace.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

func (nuo *NamespaceUpdateOne) sqlSave(ctx context.Context) (_node *Namespace, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   namespace.Table,
			Columns: namespace.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: namespace.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Namespace.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := nuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: namespace.FieldName,
		})
	}
	if value, ok := nuo.mutation.DockerRepo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: namespace.FieldDockerRepo,
		})
	}
	if value, ok := nuo.mutation.RepoNamespace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: namespace.FieldRepoNamespace,
		})
	}
	if value, ok := nuo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: namespace.FieldActive,
		})
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: namespace.FieldUpdatedAt,
		})
	}
	if nuo.mutation.ClusterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   namespace.ClusterTable,
			Columns: []string{namespace.ClusterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: k8scluster.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ClusterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   namespace.ClusterTable,
			Columns: []string{namespace.ClusterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: k8scluster.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ApplicationsTable,
			Columns: []string{namespace.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: application.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !nuo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ApplicationsTable,
			Columns: []string{namespace.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   namespace.ApplicationsTable,
			Columns: []string{namespace.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Namespace{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{namespace.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
