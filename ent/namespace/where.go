// Code generated by entc, DO NOT EDIT.

package namespace

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/lingfohn/lime/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// DockerRepo applies equality check predicate on the "dockerRepo" field. It's identical to DockerRepoEQ.
func DockerRepo(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDockerRepo), v))
	})
}

// RepoNamespace applies equality check predicate on the "repoNamespace" field. It's identical to RepoNamespaceEQ.
func RepoNamespace(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepoNamespace), v))
	})
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Namespace {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Namespace(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Namespace {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Namespace(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DockerRepoEQ applies the EQ predicate on the "dockerRepo" field.
func DockerRepoEQ(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDockerRepo), v))
	})
}

// DockerRepoNEQ applies the NEQ predicate on the "dockerRepo" field.
func DockerRepoNEQ(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDockerRepo), v))
	})
}

// DockerRepoIn applies the In predicate on the "dockerRepo" field.
func DockerRepoIn(vs ...string) predicate.Namespace {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Namespace(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDockerRepo), v...))
	})
}

// DockerRepoNotIn applies the NotIn predicate on the "dockerRepo" field.
func DockerRepoNotIn(vs ...string) predicate.Namespace {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Namespace(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDockerRepo), v...))
	})
}

// DockerRepoGT applies the GT predicate on the "dockerRepo" field.
func DockerRepoGT(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDockerRepo), v))
	})
}

// DockerRepoGTE applies the GTE predicate on the "dockerRepo" field.
func DockerRepoGTE(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDockerRepo), v))
	})
}

// DockerRepoLT applies the LT predicate on the "dockerRepo" field.
func DockerRepoLT(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDockerRepo), v))
	})
}

// DockerRepoLTE applies the LTE predicate on the "dockerRepo" field.
func DockerRepoLTE(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDockerRepo), v))
	})
}

// DockerRepoContains applies the Contains predicate on the "dockerRepo" field.
func DockerRepoContains(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDockerRepo), v))
	})
}

// DockerRepoHasPrefix applies the HasPrefix predicate on the "dockerRepo" field.
func DockerRepoHasPrefix(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDockerRepo), v))
	})
}

// DockerRepoHasSuffix applies the HasSuffix predicate on the "dockerRepo" field.
func DockerRepoHasSuffix(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDockerRepo), v))
	})
}

// DockerRepoEqualFold applies the EqualFold predicate on the "dockerRepo" field.
func DockerRepoEqualFold(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDockerRepo), v))
	})
}

// DockerRepoContainsFold applies the ContainsFold predicate on the "dockerRepo" field.
func DockerRepoContainsFold(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDockerRepo), v))
	})
}

// RepoNamespaceEQ applies the EQ predicate on the "repoNamespace" field.
func RepoNamespaceEQ(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceNEQ applies the NEQ predicate on the "repoNamespace" field.
func RepoNamespaceNEQ(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceIn applies the In predicate on the "repoNamespace" field.
func RepoNamespaceIn(vs ...string) predicate.Namespace {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Namespace(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRepoNamespace), v...))
	})
}

// RepoNamespaceNotIn applies the NotIn predicate on the "repoNamespace" field.
func RepoNamespaceNotIn(vs ...string) predicate.Namespace {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Namespace(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRepoNamespace), v...))
	})
}

// RepoNamespaceGT applies the GT predicate on the "repoNamespace" field.
func RepoNamespaceGT(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceGTE applies the GTE predicate on the "repoNamespace" field.
func RepoNamespaceGTE(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceLT applies the LT predicate on the "repoNamespace" field.
func RepoNamespaceLT(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceLTE applies the LTE predicate on the "repoNamespace" field.
func RepoNamespaceLTE(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceContains applies the Contains predicate on the "repoNamespace" field.
func RepoNamespaceContains(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceHasPrefix applies the HasPrefix predicate on the "repoNamespace" field.
func RepoNamespaceHasPrefix(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceHasSuffix applies the HasSuffix predicate on the "repoNamespace" field.
func RepoNamespaceHasSuffix(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceEqualFold applies the EqualFold predicate on the "repoNamespace" field.
func RepoNamespaceEqualFold(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRepoNamespace), v))
	})
}

// RepoNamespaceContainsFold applies the ContainsFold predicate on the "repoNamespace" field.
func RepoNamespaceContainsFold(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRepoNamespace), v))
	})
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActive), v))
	})
}

// ActiveIn applies the In predicate on the "active" field.
func ActiveIn(vs ...string) predicate.Namespace {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Namespace(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActive), v...))
	})
}

// ActiveNotIn applies the NotIn predicate on the "active" field.
func ActiveNotIn(vs ...string) predicate.Namespace {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Namespace(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActive), v...))
	})
}

// ActiveGT applies the GT predicate on the "active" field.
func ActiveGT(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActive), v))
	})
}

// ActiveGTE applies the GTE predicate on the "active" field.
func ActiveGTE(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActive), v))
	})
}

// ActiveLT applies the LT predicate on the "active" field.
func ActiveLT(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActive), v))
	})
}

// ActiveLTE applies the LTE predicate on the "active" field.
func ActiveLTE(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActive), v))
	})
}

// ActiveContains applies the Contains predicate on the "active" field.
func ActiveContains(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldActive), v))
	})
}

// ActiveHasPrefix applies the HasPrefix predicate on the "active" field.
func ActiveHasPrefix(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldActive), v))
	})
}

// ActiveHasSuffix applies the HasSuffix predicate on the "active" field.
func ActiveHasSuffix(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldActive), v))
	})
}

// ActiveEqualFold applies the EqualFold predicate on the "active" field.
func ActiveEqualFold(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldActive), v))
	})
}

// ActiveContainsFold applies the ContainsFold predicate on the "active" field.
func ActiveContainsFold(v string) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldActive), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Namespace {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Namespace(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Namespace {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Namespace(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Namespace {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Namespace(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Namespace {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Namespace(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasCluster applies the HasEdge predicate on the "cluster" edge.
func HasCluster() predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClusterTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClusterTable, ClusterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClusterWith applies the HasEdge predicate on the "cluster" edge with a given conditions (other predicates).
func HasClusterWith(preds ...predicate.K8sCluster) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClusterInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClusterTable, ClusterColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApplications applies the HasEdge predicate on the "applications" edge.
func HasApplications() predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApplicationsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationsWith applies the HasEdge predicate on the "applications" edge with a given conditions (other predicates).
func HasApplicationsWith(preds ...predicate.Application) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ApplicationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Namespace) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Namespace) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Namespace) predicate.Namespace {
	return predicate.Namespace(func(s *sql.Selector) {
		p(s.Not())
	})
}
