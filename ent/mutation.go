// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"time"

	"github.com/lingfohn/lime/ent/menu"
	"github.com/lingfohn/lime/ent/permission"
	"github.com/lingfohn/lime/ent/role"
	"github.com/lingfohn/lime/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMenu       = "Menu"
	TypePermission = "Permission"
	TypeRole       = "Role"
	TypeUser       = "User"
)

// MenuMutation represents an operation that mutate the Menus
// nodes in the graph.
type MenuMutation struct {
	config
	op              Op
	typ             string
	id              *int
	path            *string
	name            *string
	component       *string
	parentId        *int
	addparentId     *int
	redirect        *string
	weight          *int
	addweight       *int
	level           *int
	addlevel        *int
	title           *string
	icon            *string
	target          *string
	keepAlive       *bool
	show            *bool
	createdAt       *time.Time
	updatedAt       *time.Time
	clearedFields   map[string]struct{}
	parent          *int
	clearedparent   bool
	submenus        map[int]struct{}
	removedsubmenus map[int]struct{}
}

var _ ent.Mutation = (*MenuMutation)(nil)

// newMenuMutation creates new mutation for $n.Name.
func newMenuMutation(c config, op Op) *MenuMutation {
	return &MenuMutation{
		config:        c,
		op:            op,
		typ:           TypeMenu,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MenuMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPath sets the path field.
func (m *MenuMutation) SetPath(s string) {
	m.path = &s
}

// Path returns the path value in the mutation.
func (m *MenuMutation) Path() (r string, exists bool) {
	v := m.path
	if v == nil {
		return
	}
	return *v, true
}

// ResetPath reset all changes of the path field.
func (m *MenuMutation) ResetPath() {
	m.path = nil
}

// SetName sets the name field.
func (m *MenuMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *MenuMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// ResetName reset all changes of the name field.
func (m *MenuMutation) ResetName() {
	m.name = nil
}

// SetComponent sets the component field.
func (m *MenuMutation) SetComponent(s string) {
	m.component = &s
}

// Component returns the component value in the mutation.
func (m *MenuMutation) Component() (r string, exists bool) {
	v := m.component
	if v == nil {
		return
	}
	return *v, true
}

// ResetComponent reset all changes of the component field.
func (m *MenuMutation) ResetComponent() {
	m.component = nil
}

// SetParentId sets the parentId field.
func (m *MenuMutation) SetParentId(i int) {
	m.parentId = &i
	m.addparentId = nil
}

// ParentId returns the parentId value in the mutation.
func (m *MenuMutation) ParentId() (r int, exists bool) {
	v := m.parentId
	if v == nil {
		return
	}
	return *v, true
}

// AddParentId adds i to parentId.
func (m *MenuMutation) AddParentId(i int) {
	if m.addparentId != nil {
		*m.addparentId += i
	} else {
		m.addparentId = &i
	}
}

// AddedParentId returns the value that was added to the parentId field in this mutation.
func (m *MenuMutation) AddedParentId() (r int, exists bool) {
	v := m.addparentId
	if v == nil {
		return
	}
	return *v, true
}

// ResetParentId reset all changes of the parentId field.
func (m *MenuMutation) ResetParentId() {
	m.parentId = nil
	m.addparentId = nil
}

// SetRedirect sets the redirect field.
func (m *MenuMutation) SetRedirect(s string) {
	m.redirect = &s
}

// Redirect returns the redirect value in the mutation.
func (m *MenuMutation) Redirect() (r string, exists bool) {
	v := m.redirect
	if v == nil {
		return
	}
	return *v, true
}

// ClearRedirect clears the value of redirect.
func (m *MenuMutation) ClearRedirect() {
	m.redirect = nil
	m.clearedFields[menu.FieldRedirect] = struct{}{}
}

// RedirectCleared returns if the field redirect was cleared in this mutation.
func (m *MenuMutation) RedirectCleared() bool {
	_, ok := m.clearedFields[menu.FieldRedirect]
	return ok
}

// ResetRedirect reset all changes of the redirect field.
func (m *MenuMutation) ResetRedirect() {
	m.redirect = nil
	delete(m.clearedFields, menu.FieldRedirect)
}

// SetWeight sets the weight field.
func (m *MenuMutation) SetWeight(i int) {
	m.weight = &i
	m.addweight = nil
}

// Weight returns the weight value in the mutation.
func (m *MenuMutation) Weight() (r int, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// AddWeight adds i to weight.
func (m *MenuMutation) AddWeight(i int) {
	if m.addweight != nil {
		*m.addweight += i
	} else {
		m.addweight = &i
	}
}

// AddedWeight returns the value that was added to the weight field in this mutation.
func (m *MenuMutation) AddedWeight() (r int, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ClearWeight clears the value of weight.
func (m *MenuMutation) ClearWeight() {
	m.weight = nil
	m.addweight = nil
	m.clearedFields[menu.FieldWeight] = struct{}{}
}

// WeightCleared returns if the field weight was cleared in this mutation.
func (m *MenuMutation) WeightCleared() bool {
	_, ok := m.clearedFields[menu.FieldWeight]
	return ok
}

// ResetWeight reset all changes of the weight field.
func (m *MenuMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
	delete(m.clearedFields, menu.FieldWeight)
}

// SetLevel sets the level field.
func (m *MenuMutation) SetLevel(i int) {
	m.level = &i
	m.addlevel = nil
}

// Level returns the level value in the mutation.
func (m *MenuMutation) Level() (r int, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// AddLevel adds i to level.
func (m *MenuMutation) AddLevel(i int) {
	if m.addlevel != nil {
		*m.addlevel += i
	} else {
		m.addlevel = &i
	}
}

// AddedLevel returns the value that was added to the level field in this mutation.
func (m *MenuMutation) AddedLevel() (r int, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevel reset all changes of the level field.
func (m *MenuMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
}

// SetTitle sets the title field.
func (m *MenuMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the title value in the mutation.
func (m *MenuMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// ClearTitle clears the value of title.
func (m *MenuMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[menu.FieldTitle] = struct{}{}
}

// TitleCleared returns if the field title was cleared in this mutation.
func (m *MenuMutation) TitleCleared() bool {
	_, ok := m.clearedFields[menu.FieldTitle]
	return ok
}

// ResetTitle reset all changes of the title field.
func (m *MenuMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, menu.FieldTitle)
}

// SetIcon sets the icon field.
func (m *MenuMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the icon value in the mutation.
func (m *MenuMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// ClearIcon clears the value of icon.
func (m *MenuMutation) ClearIcon() {
	m.icon = nil
	m.clearedFields[menu.FieldIcon] = struct{}{}
}

// IconCleared returns if the field icon was cleared in this mutation.
func (m *MenuMutation) IconCleared() bool {
	_, ok := m.clearedFields[menu.FieldIcon]
	return ok
}

// ResetIcon reset all changes of the icon field.
func (m *MenuMutation) ResetIcon() {
	m.icon = nil
	delete(m.clearedFields, menu.FieldIcon)
}

// SetTarget sets the target field.
func (m *MenuMutation) SetTarget(s string) {
	m.target = &s
}

// Target returns the target value in the mutation.
func (m *MenuMutation) Target() (r string, exists bool) {
	v := m.target
	if v == nil {
		return
	}
	return *v, true
}

// ClearTarget clears the value of target.
func (m *MenuMutation) ClearTarget() {
	m.target = nil
	m.clearedFields[menu.FieldTarget] = struct{}{}
}

// TargetCleared returns if the field target was cleared in this mutation.
func (m *MenuMutation) TargetCleared() bool {
	_, ok := m.clearedFields[menu.FieldTarget]
	return ok
}

// ResetTarget reset all changes of the target field.
func (m *MenuMutation) ResetTarget() {
	m.target = nil
	delete(m.clearedFields, menu.FieldTarget)
}

// SetKeepAlive sets the keepAlive field.
func (m *MenuMutation) SetKeepAlive(b bool) {
	m.keepAlive = &b
}

// KeepAlive returns the keepAlive value in the mutation.
func (m *MenuMutation) KeepAlive() (r bool, exists bool) {
	v := m.keepAlive
	if v == nil {
		return
	}
	return *v, true
}

// ResetKeepAlive reset all changes of the keepAlive field.
func (m *MenuMutation) ResetKeepAlive() {
	m.keepAlive = nil
}

// SetShow sets the show field.
func (m *MenuMutation) SetShow(b bool) {
	m.show = &b
}

// Show returns the show value in the mutation.
func (m *MenuMutation) Show() (r bool, exists bool) {
	v := m.show
	if v == nil {
		return
	}
	return *v, true
}

// ClearShow clears the value of show.
func (m *MenuMutation) ClearShow() {
	m.show = nil
	m.clearedFields[menu.FieldShow] = struct{}{}
}

// ShowCleared returns if the field show was cleared in this mutation.
func (m *MenuMutation) ShowCleared() bool {
	_, ok := m.clearedFields[menu.FieldShow]
	return ok
}

// ResetShow reset all changes of the show field.
func (m *MenuMutation) ResetShow() {
	m.show = nil
	delete(m.clearedFields, menu.FieldShow)
}

// SetCreatedAt sets the createdAt field.
func (m *MenuMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the createdAt value in the mutation.
func (m *MenuMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the createdAt field.
func (m *MenuMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the updatedAt field.
func (m *MenuMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the updatedAt value in the mutation.
func (m *MenuMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the updatedAt field.
func (m *MenuMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetParentID sets the parent edge to Menu by id.
func (m *MenuMutation) SetParentID(id int) {
	m.parent = &id
}

// ClearParent clears the parent edge to Menu.
func (m *MenuMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared returns if the edge parent was cleared.
func (m *MenuMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the parent id in the mutation.
func (m *MenuMutation) ParentID() (id int, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the parent ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *MenuMutation) ParentIDs() (ids []int) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent reset all changes of the parent edge.
func (m *MenuMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddSubmenuIDs adds the submenus edge to Menu by ids.
func (m *MenuMutation) AddSubmenuIDs(ids ...int) {
	if m.submenus == nil {
		m.submenus = make(map[int]struct{})
	}
	for i := range ids {
		m.submenus[ids[i]] = struct{}{}
	}
}

// RemoveSubmenuIDs removes the submenus edge to Menu by ids.
func (m *MenuMutation) RemoveSubmenuIDs(ids ...int) {
	if m.removedsubmenus == nil {
		m.removedsubmenus = make(map[int]struct{})
	}
	for i := range ids {
		m.removedsubmenus[ids[i]] = struct{}{}
	}
}

// RemovedSubmenus returns the removed ids of submenus.
func (m *MenuMutation) RemovedSubmenusIDs() (ids []int) {
	for id := range m.removedsubmenus {
		ids = append(ids, id)
	}
	return
}

// SubmenusIDs returns the submenus ids in the mutation.
func (m *MenuMutation) SubmenusIDs() (ids []int) {
	for id := range m.submenus {
		ids = append(ids, id)
	}
	return
}

// ResetSubmenus reset all changes of the submenus edge.
func (m *MenuMutation) ResetSubmenus() {
	m.submenus = nil
	m.removedsubmenus = nil
}

// Op returns the operation name.
func (m *MenuMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Menu).
func (m *MenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MenuMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.path != nil {
		fields = append(fields, menu.FieldPath)
	}
	if m.name != nil {
		fields = append(fields, menu.FieldName)
	}
	if m.component != nil {
		fields = append(fields, menu.FieldComponent)
	}
	if m.parentId != nil {
		fields = append(fields, menu.FieldParentId)
	}
	if m.redirect != nil {
		fields = append(fields, menu.FieldRedirect)
	}
	if m.weight != nil {
		fields = append(fields, menu.FieldWeight)
	}
	if m.level != nil {
		fields = append(fields, menu.FieldLevel)
	}
	if m.title != nil {
		fields = append(fields, menu.FieldTitle)
	}
	if m.icon != nil {
		fields = append(fields, menu.FieldIcon)
	}
	if m.target != nil {
		fields = append(fields, menu.FieldTarget)
	}
	if m.keepAlive != nil {
		fields = append(fields, menu.FieldKeepAlive)
	}
	if m.show != nil {
		fields = append(fields, menu.FieldShow)
	}
	if m.createdAt != nil {
		fields = append(fields, menu.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, menu.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case menu.FieldPath:
		return m.Path()
	case menu.FieldName:
		return m.Name()
	case menu.FieldComponent:
		return m.Component()
	case menu.FieldParentId:
		return m.ParentId()
	case menu.FieldRedirect:
		return m.Redirect()
	case menu.FieldWeight:
		return m.Weight()
	case menu.FieldLevel:
		return m.Level()
	case menu.FieldTitle:
		return m.Title()
	case menu.FieldIcon:
		return m.Icon()
	case menu.FieldTarget:
		return m.Target()
	case menu.FieldKeepAlive:
		return m.KeepAlive()
	case menu.FieldShow:
		return m.Show()
	case menu.FieldCreatedAt:
		return m.CreatedAt()
	case menu.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case menu.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case menu.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case menu.FieldComponent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComponent(v)
		return nil
	case menu.FieldParentId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentId(v)
		return nil
	case menu.FieldRedirect:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedirect(v)
		return nil
	case menu.FieldWeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case menu.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case menu.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case menu.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case menu.FieldTarget:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTarget(v)
		return nil
	case menu.FieldKeepAlive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeepAlive(v)
		return nil
	case menu.FieldShow:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShow(v)
		return nil
	case menu.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case menu.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Menu field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MenuMutation) AddedFields() []string {
	var fields []string
	if m.addparentId != nil {
		fields = append(fields, menu.FieldParentId)
	}
	if m.addweight != nil {
		fields = append(fields, menu.FieldWeight)
	}
	if m.addlevel != nil {
		fields = append(fields, menu.FieldLevel)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MenuMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case menu.FieldParentId:
		return m.AddedParentId()
	case menu.FieldWeight:
		return m.AddedWeight()
	case menu.FieldLevel:
		return m.AddedLevel()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	case menu.FieldParentId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddParentId(v)
		return nil
	case menu.FieldWeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case menu.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevel(v)
		return nil
	}
	return fmt.Errorf("unknown Menu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MenuMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(menu.FieldRedirect) {
		fields = append(fields, menu.FieldRedirect)
	}
	if m.FieldCleared(menu.FieldWeight) {
		fields = append(fields, menu.FieldWeight)
	}
	if m.FieldCleared(menu.FieldTitle) {
		fields = append(fields, menu.FieldTitle)
	}
	if m.FieldCleared(menu.FieldIcon) {
		fields = append(fields, menu.FieldIcon)
	}
	if m.FieldCleared(menu.FieldTarget) {
		fields = append(fields, menu.FieldTarget)
	}
	if m.FieldCleared(menu.FieldShow) {
		fields = append(fields, menu.FieldShow)
	}
	return fields
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MenuMutation) ClearField(name string) error {
	switch name {
	case menu.FieldRedirect:
		m.ClearRedirect()
		return nil
	case menu.FieldWeight:
		m.ClearWeight()
		return nil
	case menu.FieldTitle:
		m.ClearTitle()
		return nil
	case menu.FieldIcon:
		m.ClearIcon()
		return nil
	case menu.FieldTarget:
		m.ClearTarget()
		return nil
	case menu.FieldShow:
		m.ClearShow()
		return nil
	}
	return fmt.Errorf("unknown Menu nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MenuMutation) ResetField(name string) error {
	switch name {
	case menu.FieldPath:
		m.ResetPath()
		return nil
	case menu.FieldName:
		m.ResetName()
		return nil
	case menu.FieldComponent:
		m.ResetComponent()
		return nil
	case menu.FieldParentId:
		m.ResetParentId()
		return nil
	case menu.FieldRedirect:
		m.ResetRedirect()
		return nil
	case menu.FieldWeight:
		m.ResetWeight()
		return nil
	case menu.FieldLevel:
		m.ResetLevel()
		return nil
	case menu.FieldTitle:
		m.ResetTitle()
		return nil
	case menu.FieldIcon:
		m.ResetIcon()
		return nil
	case menu.FieldTarget:
		m.ResetTarget()
		return nil
	case menu.FieldKeepAlive:
		m.ResetKeepAlive()
		return nil
	case menu.FieldShow:
		m.ResetShow()
		return nil
	case menu.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case menu.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Menu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent != nil {
		edges = append(edges, menu.EdgeParent)
	}
	if m.submenus != nil {
		edges = append(edges, menu.EdgeSubmenus)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MenuMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case menu.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case menu.EdgeSubmenus:
		ids := make([]ent.Value, 0, len(m.submenus))
		for id := range m.submenus {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsubmenus != nil {
		edges = append(edges, menu.EdgeSubmenus)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MenuMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case menu.EdgeSubmenus:
		ids := make([]ent.Value, 0, len(m.removedsubmenus))
		for id := range m.removedsubmenus {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent {
		edges = append(edges, menu.EdgeParent)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MenuMutation) EdgeCleared(name string) bool {
	switch name {
	case menu.EdgeParent:
		return m.clearedparent
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MenuMutation) ClearEdge(name string) error {
	switch name {
	case menu.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Menu unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MenuMutation) ResetEdge(name string) error {
	switch name {
	case menu.EdgeParent:
		m.ResetParent()
		return nil
	case menu.EdgeSubmenus:
		m.ResetSubmenus()
		return nil
	}
	return fmt.Errorf("unknown Menu edge %s", name)
}

// PermissionMutation represents an operation that mutate the Permissions
// nodes in the graph.
type PermissionMutation struct {
	config
	op              Op
	typ             string
	id              *int
	method          *string
	fullpath        *string
	action          *string
	summary         *string
	controlLevel    *int
	addcontrolLevel *int
	status          *int
	addstatus       *int
	createdAt       *time.Time
	updatedAt       *time.Time
	clearedFields   map[string]struct{}
}

var _ ent.Mutation = (*PermissionMutation)(nil)

// newPermissionMutation creates new mutation for $n.Name.
func newPermissionMutation(c config, op Op) *PermissionMutation {
	return &PermissionMutation{
		config:        c,
		op:            op,
		typ:           TypePermission,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PermissionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetMethod sets the method field.
func (m *PermissionMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the method value in the mutation.
func (m *PermissionMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// ResetMethod reset all changes of the method field.
func (m *PermissionMutation) ResetMethod() {
	m.method = nil
}

// SetFullpath sets the fullpath field.
func (m *PermissionMutation) SetFullpath(s string) {
	m.fullpath = &s
}

// Fullpath returns the fullpath value in the mutation.
func (m *PermissionMutation) Fullpath() (r string, exists bool) {
	v := m.fullpath
	if v == nil {
		return
	}
	return *v, true
}

// ResetFullpath reset all changes of the fullpath field.
func (m *PermissionMutation) ResetFullpath() {
	m.fullpath = nil
}

// SetAction sets the action field.
func (m *PermissionMutation) SetAction(s string) {
	m.action = &s
}

// Action returns the action value in the mutation.
func (m *PermissionMutation) Action() (r string, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// ResetAction reset all changes of the action field.
func (m *PermissionMutation) ResetAction() {
	m.action = nil
}

// SetSummary sets the summary field.
func (m *PermissionMutation) SetSummary(s string) {
	m.summary = &s
}

// Summary returns the summary value in the mutation.
func (m *PermissionMutation) Summary() (r string, exists bool) {
	v := m.summary
	if v == nil {
		return
	}
	return *v, true
}

// ResetSummary reset all changes of the summary field.
func (m *PermissionMutation) ResetSummary() {
	m.summary = nil
}

// SetControlLevel sets the controlLevel field.
func (m *PermissionMutation) SetControlLevel(i int) {
	m.controlLevel = &i
	m.addcontrolLevel = nil
}

// ControlLevel returns the controlLevel value in the mutation.
func (m *PermissionMutation) ControlLevel() (r int, exists bool) {
	v := m.controlLevel
	if v == nil {
		return
	}
	return *v, true
}

// AddControlLevel adds i to controlLevel.
func (m *PermissionMutation) AddControlLevel(i int) {
	if m.addcontrolLevel != nil {
		*m.addcontrolLevel += i
	} else {
		m.addcontrolLevel = &i
	}
}

// AddedControlLevel returns the value that was added to the controlLevel field in this mutation.
func (m *PermissionMutation) AddedControlLevel() (r int, exists bool) {
	v := m.addcontrolLevel
	if v == nil {
		return
	}
	return *v, true
}

// ResetControlLevel reset all changes of the controlLevel field.
func (m *PermissionMutation) ResetControlLevel() {
	m.controlLevel = nil
	m.addcontrolLevel = nil
}

// SetStatus sets the status field.
func (m *PermissionMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the status value in the mutation.
func (m *PermissionMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// AddStatus adds i to status.
func (m *PermissionMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the status field in this mutation.
func (m *PermissionMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus reset all changes of the status field.
func (m *PermissionMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreatedAt sets the createdAt field.
func (m *PermissionMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the createdAt value in the mutation.
func (m *PermissionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the createdAt field.
func (m *PermissionMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the updatedAt field.
func (m *PermissionMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the updatedAt value in the mutation.
func (m *PermissionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the updatedAt field.
func (m *PermissionMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// Op returns the operation name.
func (m *PermissionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Permission).
func (m *PermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PermissionMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.method != nil {
		fields = append(fields, permission.FieldMethod)
	}
	if m.fullpath != nil {
		fields = append(fields, permission.FieldFullpath)
	}
	if m.action != nil {
		fields = append(fields, permission.FieldAction)
	}
	if m.summary != nil {
		fields = append(fields, permission.FieldSummary)
	}
	if m.controlLevel != nil {
		fields = append(fields, permission.FieldControlLevel)
	}
	if m.status != nil {
		fields = append(fields, permission.FieldStatus)
	}
	if m.createdAt != nil {
		fields = append(fields, permission.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, permission.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PermissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case permission.FieldMethod:
		return m.Method()
	case permission.FieldFullpath:
		return m.Fullpath()
	case permission.FieldAction:
		return m.Action()
	case permission.FieldSummary:
		return m.Summary()
	case permission.FieldControlLevel:
		return m.ControlLevel()
	case permission.FieldStatus:
		return m.Status()
	case permission.FieldCreatedAt:
		return m.CreatedAt()
	case permission.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case permission.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case permission.FieldFullpath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullpath(v)
		return nil
	case permission.FieldAction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case permission.FieldSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummary(v)
		return nil
	case permission.FieldControlLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetControlLevel(v)
		return nil
	case permission.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case permission.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case permission.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PermissionMutation) AddedFields() []string {
	var fields []string
	if m.addcontrolLevel != nil {
		fields = append(fields, permission.FieldControlLevel)
	}
	if m.addstatus != nil {
		fields = append(fields, permission.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PermissionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case permission.FieldControlLevel:
		return m.AddedControlLevel()
	case permission.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PermissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case permission.FieldControlLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddControlLevel(v)
		return nil
	case permission.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Permission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PermissionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PermissionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Permission nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PermissionMutation) ResetField(name string) error {
	switch name {
	case permission.FieldMethod:
		m.ResetMethod()
		return nil
	case permission.FieldFullpath:
		m.ResetFullpath()
		return nil
	case permission.FieldAction:
		m.ResetAction()
		return nil
	case permission.FieldSummary:
		m.ResetSummary()
		return nil
	case permission.FieldControlLevel:
		m.ResetControlLevel()
		return nil
	case permission.FieldStatus:
		m.ResetStatus()
		return nil
	case permission.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case permission.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PermissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PermissionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PermissionMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PermissionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Permission unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PermissionMutation) ResetEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Permission edge %s", name)
}

// RoleMutation represents an operation that mutate the Roles
// nodes in the graph.
type RoleMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	description   *string
	status        *int
	addstatus     *int
	createdAt     *time.Time
	updatedAt     *time.Time
	clearedFields map[string]struct{}
}

var _ ent.Mutation = (*RoleMutation)(nil)

// newRoleMutation creates new mutation for $n.Name.
func newRoleMutation(c config, op Op) *RoleMutation {
	return &RoleMutation{
		config:        c,
		op:            op,
		typ:           TypeRole,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *RoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *RoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// ResetName reset all changes of the name field.
func (m *RoleMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the description field.
func (m *RoleMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the description value in the mutation.
func (m *RoleMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// ClearDescription clears the value of description.
func (m *RoleMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[role.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the field description was cleared in this mutation.
func (m *RoleMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[role.FieldDescription]
	return ok
}

// ResetDescription reset all changes of the description field.
func (m *RoleMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, role.FieldDescription)
}

// SetStatus sets the status field.
func (m *RoleMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the status value in the mutation.
func (m *RoleMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// AddStatus adds i to status.
func (m *RoleMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the status field in this mutation.
func (m *RoleMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus reset all changes of the status field.
func (m *RoleMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreatedAt sets the createdAt field.
func (m *RoleMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the createdAt value in the mutation.
func (m *RoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the createdAt field.
func (m *RoleMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the updatedAt field.
func (m *RoleMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the updatedAt value in the mutation.
func (m *RoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the updatedAt field.
func (m *RoleMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// Op returns the operation name.
func (m *RoleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Role).
func (m *RoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoleMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, role.FieldName)
	}
	if m.description != nil {
		fields = append(fields, role.FieldDescription)
	}
	if m.status != nil {
		fields = append(fields, role.FieldStatus)
	}
	if m.createdAt != nil {
		fields = append(fields, role.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, role.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case role.FieldName:
		return m.Name()
	case role.FieldDescription:
		return m.Description()
	case role.FieldStatus:
		return m.Status()
	case role.FieldCreatedAt:
		return m.CreatedAt()
	case role.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case role.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case role.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case role.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case role.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case role.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoleMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, role.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case role.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case role.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Role numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(role.FieldDescription) {
		fields = append(fields, role.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleMutation) ClearField(name string) error {
	switch name {
	case role.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Role nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoleMutation) ResetField(name string) error {
	switch name {
	case role.FieldName:
		m.ResetName()
		return nil
	case role.FieldDescription:
		m.ResetDescription()
		return nil
	case role.FieldStatus:
		m.ResetStatus()
		return nil
	case role.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case role.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoleMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Role unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoleMutation) ResetEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Role edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	password      *string
	initial       *bool
	oauser        *string
	name          *string
	telephone     *string
	email         *string
	avatar        *string
	super         *bool
	status        *int
	addstatus     *int
	lastLogin     *time.Time
	createdAt     *time.Time
	updatedAt     *time.Time
	clearedFields map[string]struct{}
}

var _ ent.Mutation = (*UserMutation)(nil)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op) *UserMutation {
	return &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUsername sets the username field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the username value in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// ResetUsername reset all changes of the username field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the password field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the password value in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// ClearPassword clears the value of password.
func (m *UserMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[user.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the field password was cleared in this mutation.
func (m *UserMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[user.FieldPassword]
	return ok
}

// ResetPassword reset all changes of the password field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, user.FieldPassword)
}

// SetInitial sets the initial field.
func (m *UserMutation) SetInitial(b bool) {
	m.initial = &b
}

// Initial returns the initial value in the mutation.
func (m *UserMutation) Initial() (r bool, exists bool) {
	v := m.initial
	if v == nil {
		return
	}
	return *v, true
}

// ResetInitial reset all changes of the initial field.
func (m *UserMutation) ResetInitial() {
	m.initial = nil
}

// SetOauser sets the oauser field.
func (m *UserMutation) SetOauser(s string) {
	m.oauser = &s
}

// Oauser returns the oauser value in the mutation.
func (m *UserMutation) Oauser() (r string, exists bool) {
	v := m.oauser
	if v == nil {
		return
	}
	return *v, true
}

// ClearOauser clears the value of oauser.
func (m *UserMutation) ClearOauser() {
	m.oauser = nil
	m.clearedFields[user.FieldOauser] = struct{}{}
}

// OauserCleared returns if the field oauser was cleared in this mutation.
func (m *UserMutation) OauserCleared() bool {
	_, ok := m.clearedFields[user.FieldOauser]
	return ok
}

// ResetOauser reset all changes of the oauser field.
func (m *UserMutation) ResetOauser() {
	m.oauser = nil
	delete(m.clearedFields, user.FieldOauser)
}

// SetName sets the name field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// ClearName clears the value of name.
func (m *UserMutation) ClearName() {
	m.name = nil
	m.clearedFields[user.FieldName] = struct{}{}
}

// NameCleared returns if the field name was cleared in this mutation.
func (m *UserMutation) NameCleared() bool {
	_, ok := m.clearedFields[user.FieldName]
	return ok
}

// ResetName reset all changes of the name field.
func (m *UserMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, user.FieldName)
}

// SetTelephone sets the telephone field.
func (m *UserMutation) SetTelephone(s string) {
	m.telephone = &s
}

// Telephone returns the telephone value in the mutation.
func (m *UserMutation) Telephone() (r string, exists bool) {
	v := m.telephone
	if v == nil {
		return
	}
	return *v, true
}

// ClearTelephone clears the value of telephone.
func (m *UserMutation) ClearTelephone() {
	m.telephone = nil
	m.clearedFields[user.FieldTelephone] = struct{}{}
}

// TelephoneCleared returns if the field telephone was cleared in this mutation.
func (m *UserMutation) TelephoneCleared() bool {
	_, ok := m.clearedFields[user.FieldTelephone]
	return ok
}

// ResetTelephone reset all changes of the telephone field.
func (m *UserMutation) ResetTelephone() {
	m.telephone = nil
	delete(m.clearedFields, user.FieldTelephone)
}

// SetEmail sets the email field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// ResetEmail reset all changes of the email field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetAvatar sets the avatar field.
func (m *UserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the avatar value in the mutation.
func (m *UserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// ClearAvatar clears the value of avatar.
func (m *UserMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[user.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the field avatar was cleared in this mutation.
func (m *UserMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatar]
	return ok
}

// ResetAvatar reset all changes of the avatar field.
func (m *UserMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, user.FieldAvatar)
}

// SetSuper sets the super field.
func (m *UserMutation) SetSuper(b bool) {
	m.super = &b
}

// Super returns the super value in the mutation.
func (m *UserMutation) Super() (r bool, exists bool) {
	v := m.super
	if v == nil {
		return
	}
	return *v, true
}

// ResetSuper reset all changes of the super field.
func (m *UserMutation) ResetSuper() {
	m.super = nil
}

// SetStatus sets the status field.
func (m *UserMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the status value in the mutation.
func (m *UserMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// AddStatus adds i to status.
func (m *UserMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the status field in this mutation.
func (m *UserMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of status.
func (m *UserMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[user.FieldStatus] = struct{}{}
}

// StatusCleared returns if the field status was cleared in this mutation.
func (m *UserMutation) StatusCleared() bool {
	_, ok := m.clearedFields[user.FieldStatus]
	return ok
}

// ResetStatus reset all changes of the status field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, user.FieldStatus)
}

// SetLastLogin sets the lastLogin field.
func (m *UserMutation) SetLastLogin(t time.Time) {
	m.lastLogin = &t
}

// LastLogin returns the lastLogin value in the mutation.
func (m *UserMutation) LastLogin() (r time.Time, exists bool) {
	v := m.lastLogin
	if v == nil {
		return
	}
	return *v, true
}

// ClearLastLogin clears the value of lastLogin.
func (m *UserMutation) ClearLastLogin() {
	m.lastLogin = nil
	m.clearedFields[user.FieldLastLogin] = struct{}{}
}

// LastLoginCleared returns if the field lastLogin was cleared in this mutation.
func (m *UserMutation) LastLoginCleared() bool {
	_, ok := m.clearedFields[user.FieldLastLogin]
	return ok
}

// ResetLastLogin reset all changes of the lastLogin field.
func (m *UserMutation) ResetLastLogin() {
	m.lastLogin = nil
	delete(m.clearedFields, user.FieldLastLogin)
}

// SetCreatedAt sets the createdAt field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the createdAt value in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the createdAt field.
func (m *UserMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the updatedAt field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the updatedAt value in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the updatedAt field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.initial != nil {
		fields = append(fields, user.FieldInitial)
	}
	if m.oauser != nil {
		fields = append(fields, user.FieldOauser)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.telephone != nil {
		fields = append(fields, user.FieldTelephone)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.avatar != nil {
		fields = append(fields, user.FieldAvatar)
	}
	if m.super != nil {
		fields = append(fields, user.FieldSuper)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.lastLogin != nil {
		fields = append(fields, user.FieldLastLogin)
	}
	if m.createdAt != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldInitial:
		return m.Initial()
	case user.FieldOauser:
		return m.Oauser()
	case user.FieldName:
		return m.Name()
	case user.FieldTelephone:
		return m.Telephone()
	case user.FieldEmail:
		return m.Email()
	case user.FieldAvatar:
		return m.Avatar()
	case user.FieldSuper:
		return m.Super()
	case user.FieldStatus:
		return m.Status()
	case user.FieldLastLogin:
		return m.LastLogin()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldInitial:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInitial(v)
		return nil
	case user.FieldOauser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOauser(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldTelephone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelephone(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case user.FieldSuper:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuper(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldLastLogin:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLogin(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, user.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldPassword) {
		fields = append(fields, user.FieldPassword)
	}
	if m.FieldCleared(user.FieldOauser) {
		fields = append(fields, user.FieldOauser)
	}
	if m.FieldCleared(user.FieldName) {
		fields = append(fields, user.FieldName)
	}
	if m.FieldCleared(user.FieldTelephone) {
		fields = append(fields, user.FieldTelephone)
	}
	if m.FieldCleared(user.FieldAvatar) {
		fields = append(fields, user.FieldAvatar)
	}
	if m.FieldCleared(user.FieldStatus) {
		fields = append(fields, user.FieldStatus)
	}
	if m.FieldCleared(user.FieldLastLogin) {
		fields = append(fields, user.FieldLastLogin)
	}
	return fields
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldPassword:
		m.ClearPassword()
		return nil
	case user.FieldOauser:
		m.ClearOauser()
		return nil
	case user.FieldName:
		m.ClearName()
		return nil
	case user.FieldTelephone:
		m.ClearTelephone()
		return nil
	case user.FieldAvatar:
		m.ClearAvatar()
		return nil
	case user.FieldStatus:
		m.ClearStatus()
		return nil
	case user.FieldLastLogin:
		m.ClearLastLogin()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldInitial:
		m.ResetInitial()
		return nil
	case user.FieldOauser:
		m.ResetOauser()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldTelephone:
		m.ResetTelephone()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldAvatar:
		m.ResetAvatar()
		return nil
	case user.FieldSuper:
		m.ResetSuper()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldLastLogin:
		m.ResetLastLogin()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User edge %s", name)
}
