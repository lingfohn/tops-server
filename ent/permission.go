// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/lingfohn/lime/ent/permission"
)

// Permission is the model entity for the Permission schema.
type Permission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// Fullpath holds the value of the "fullpath" field.
	Fullpath string `json:"fullpath,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// ControlLevel holds the value of the "controlLevel" field.
	ControlLevel int `json:"controlLevel"`
	// Status holds the value of the "status" field.
	Status int `json:"status"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Permission) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // method
		&sql.NullString{}, // fullpath
		&sql.NullString{}, // action
		&sql.NullString{}, // summary
		&sql.NullInt64{},  // controlLevel
		&sql.NullInt64{},  // status
		&sql.NullTime{},   // createdAt
		&sql.NullTime{},   // updatedAt
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Permission fields.
func (pe *Permission) assignValues(values ...interface{}) error {
	if m, n := len(values), len(permission.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pe.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field method", values[0])
	} else if value.Valid {
		pe.Method = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field fullpath", values[1])
	} else if value.Valid {
		pe.Fullpath = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field action", values[2])
	} else if value.Valid {
		pe.Action = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field summary", values[3])
	} else if value.Valid {
		pe.Summary = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field controlLevel", values[4])
	} else if value.Valid {
		pe.ControlLevel = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[5])
	} else if value.Valid {
		pe.Status = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[6])
	} else if value.Valid {
		pe.CreatedAt = value.Time
	}
	if value, ok := values[7].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[7])
	} else if value.Valid {
		pe.UpdatedAt = value.Time
	}
	return nil
}

// Update returns a builder for updating this Permission.
// Note that, you need to call Permission.Unwrap() before calling this method, if this Permission
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Permission) Update() *PermissionUpdateOne {
	return (&PermissionClient{config: pe.config}).UpdateOne(pe)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pe *Permission) Unwrap() *Permission {
	tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Permission is not a transactional entity")
	}
	pe.config.driver = tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Permission) String() string {
	var builder strings.Builder
	builder.WriteString("Permission(")
	builder.WriteString(fmt.Sprintf("id=%v", pe.ID))
	builder.WriteString(", method=")
	builder.WriteString(pe.Method)
	builder.WriteString(", fullpath=")
	builder.WriteString(pe.Fullpath)
	builder.WriteString(", action=")
	builder.WriteString(pe.Action)
	builder.WriteString(", summary=")
	builder.WriteString(pe.Summary)
	builder.WriteString(", controlLevel=")
	builder.WriteString(fmt.Sprintf("%v", pe.ControlLevel))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", pe.Status))
	builder.WriteString(", createdAt=")
	builder.WriteString(pe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(pe.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Permissions is a parsable slice of Permission.
type Permissions []*Permission

func (pe Permissions) config(cfg config) {
	for _i := range pe {
		pe[_i].config = cfg
	}
}
