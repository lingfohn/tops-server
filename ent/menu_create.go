// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/lingfohn/lime/ent/menu"
)

// MenuCreate is the builder for creating a Menu entity.
type MenuCreate struct {
	config
	mutation *MenuMutation
	hooks    []Hook
}

// SetPath sets the path field.
func (mc *MenuCreate) SetPath(s string) *MenuCreate {
	mc.mutation.SetPath(s)
	return mc
}

// SetName sets the name field.
func (mc *MenuCreate) SetName(s string) *MenuCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetComponent sets the component field.
func (mc *MenuCreate) SetComponent(s string) *MenuCreate {
	mc.mutation.SetComponent(s)
	return mc
}

// SetParentId sets the parentId field.
func (mc *MenuCreate) SetParentId(i int) *MenuCreate {
	mc.mutation.SetParentId(i)
	return mc
}

// SetRedirect sets the redirect field.
func (mc *MenuCreate) SetRedirect(s string) *MenuCreate {
	mc.mutation.SetRedirect(s)
	return mc
}

// SetNillableRedirect sets the redirect field if the given value is not nil.
func (mc *MenuCreate) SetNillableRedirect(s *string) *MenuCreate {
	if s != nil {
		mc.SetRedirect(*s)
	}
	return mc
}

// SetWeight sets the weight field.
func (mc *MenuCreate) SetWeight(i int) *MenuCreate {
	mc.mutation.SetWeight(i)
	return mc
}

// SetNillableWeight sets the weight field if the given value is not nil.
func (mc *MenuCreate) SetNillableWeight(i *int) *MenuCreate {
	if i != nil {
		mc.SetWeight(*i)
	}
	return mc
}

// SetLevel sets the level field.
func (mc *MenuCreate) SetLevel(i int) *MenuCreate {
	mc.mutation.SetLevel(i)
	return mc
}

// SetTitle sets the title field.
func (mc *MenuCreate) SetTitle(s string) *MenuCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetNillableTitle sets the title field if the given value is not nil.
func (mc *MenuCreate) SetNillableTitle(s *string) *MenuCreate {
	if s != nil {
		mc.SetTitle(*s)
	}
	return mc
}

// SetIcon sets the icon field.
func (mc *MenuCreate) SetIcon(s string) *MenuCreate {
	mc.mutation.SetIcon(s)
	return mc
}

// SetNillableIcon sets the icon field if the given value is not nil.
func (mc *MenuCreate) SetNillableIcon(s *string) *MenuCreate {
	if s != nil {
		mc.SetIcon(*s)
	}
	return mc
}

// SetTarget sets the target field.
func (mc *MenuCreate) SetTarget(s string) *MenuCreate {
	mc.mutation.SetTarget(s)
	return mc
}

// SetNillableTarget sets the target field if the given value is not nil.
func (mc *MenuCreate) SetNillableTarget(s *string) *MenuCreate {
	if s != nil {
		mc.SetTarget(*s)
	}
	return mc
}

// SetKeepAlive sets the keepAlive field.
func (mc *MenuCreate) SetKeepAlive(b bool) *MenuCreate {
	mc.mutation.SetKeepAlive(b)
	return mc
}

// SetShow sets the show field.
func (mc *MenuCreate) SetShow(b bool) *MenuCreate {
	mc.mutation.SetShow(b)
	return mc
}

// SetNillableShow sets the show field if the given value is not nil.
func (mc *MenuCreate) SetNillableShow(b *bool) *MenuCreate {
	if b != nil {
		mc.SetShow(*b)
	}
	return mc
}

// SetCreatedAt sets the createdAt field.
func (mc *MenuCreate) SetCreatedAt(t time.Time) *MenuCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the createdAt field if the given value is not nil.
func (mc *MenuCreate) SetNillableCreatedAt(t *time.Time) *MenuCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the updatedAt field.
func (mc *MenuCreate) SetUpdatedAt(t time.Time) *MenuCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the updatedAt field if the given value is not nil.
func (mc *MenuCreate) SetNillableUpdatedAt(t *time.Time) *MenuCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetParentID sets the parent edge to Menu by id.
func (mc *MenuCreate) SetParentID(id int) *MenuCreate {
	mc.mutation.SetParentID(id)
	return mc
}

// SetNillableParentID sets the parent edge to Menu by id if the given value is not nil.
func (mc *MenuCreate) SetNillableParentID(id *int) *MenuCreate {
	if id != nil {
		mc = mc.SetParentID(*id)
	}
	return mc
}

// SetParent sets the parent edge to Menu.
func (mc *MenuCreate) SetParent(m *Menu) *MenuCreate {
	return mc.SetParentID(m.ID)
}

// AddSubmenuIDs adds the submenus edge to Menu by ids.
func (mc *MenuCreate) AddSubmenuIDs(ids ...int) *MenuCreate {
	mc.mutation.AddSubmenuIDs(ids...)
	return mc
}

// AddSubmenus adds the submenus edges to Menu.
func (mc *MenuCreate) AddSubmenus(m ...*Menu) *MenuCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddSubmenuIDs(ids...)
}

// Save creates the Menu in the database.
func (mc *MenuCreate) Save(ctx context.Context) (*Menu, error) {
	if _, ok := mc.mutation.Path(); !ok {
		return nil, errors.New("ent: missing required field \"path\"")
	}
	if _, ok := mc.mutation.Name(); !ok {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if _, ok := mc.mutation.Component(); !ok {
		return nil, errors.New("ent: missing required field \"component\"")
	}
	if _, ok := mc.mutation.ParentId(); !ok {
		return nil, errors.New("ent: missing required field \"parentId\"")
	}
	if _, ok := mc.mutation.Weight(); !ok {
		v := menu.DefaultWeight
		mc.mutation.SetWeight(v)
	}
	if _, ok := mc.mutation.Level(); !ok {
		return nil, errors.New("ent: missing required field \"level\"")
	}
	if _, ok := mc.mutation.KeepAlive(); !ok {
		return nil, errors.New("ent: missing required field \"keepAlive\"")
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := menu.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := menu.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	var (
		err  error
		node *Menu
	)
	if len(mc.hooks) == 0 {
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MenuCreate) SaveX(ctx context.Context) *Menu {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mc *MenuCreate) sqlSave(ctx context.Context) (*Menu, error) {
	var (
		m     = &Menu{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: menu.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menu.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldPath,
		})
		m.Path = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldName,
		})
		m.Name = value
	}
	if value, ok := mc.mutation.Component(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldComponent,
		})
		m.Component = value
	}
	if value, ok := mc.mutation.ParentId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldParentId,
		})
		m.ParentId = value
	}
	if value, ok := mc.mutation.Redirect(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldRedirect,
		})
		m.Redirect = value
	}
	if value, ok := mc.mutation.Weight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldWeight,
		})
		m.Weight = value
	}
	if value, ok := mc.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldLevel,
		})
		m.Level = value
	}
	if value, ok := mc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldTitle,
		})
		m.Title = value
	}
	if value, ok := mc.mutation.Icon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldIcon,
		})
		m.Icon = value
	}
	if value, ok := mc.mutation.Target(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldTarget,
		})
		m.Target = value
	}
	if value, ok := mc.mutation.KeepAlive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: menu.FieldKeepAlive,
		})
		m.KeepAlive = value
	}
	if value, ok := mc.mutation.Show(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: menu.FieldShow,
		})
		m.Show = &value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menu.FieldCreatedAt,
		})
		m.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menu.FieldUpdatedAt,
		})
		m.UpdatedAt = value
	}
	if nodes := mc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.SubmenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.SubmenusTable,
			Columns: []string{menu.SubmenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	m.ID = int(id)
	return m, nil
}
