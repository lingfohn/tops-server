// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/lingfohn/lime/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Initial holds the value of the "initial" field.
	Initial bool `json:"initial"`
	// Oauser holds the value of the "oauser" field.
	Oauser string `json:"oauser,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Telephone holds the value of the "telephone" field.
	Telephone string `json:"telephone,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// Super holds the value of the "super" field.
	Super bool `json:"super"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// LastLogin holds the value of the "lastLogin" field.
	LastLogin time.Time `json:"lastLogin,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // username
		&sql.NullString{}, // password
		&sql.NullBool{},   // initial
		&sql.NullString{}, // oauser
		&sql.NullString{}, // name
		&sql.NullString{}, // telephone
		&sql.NullString{}, // email
		&sql.NullString{}, // avatar
		&sql.NullBool{},   // super
		&sql.NullInt64{},  // status
		&sql.NullTime{},   // lastLogin
		&sql.NullTime{},   // createdAt
		&sql.NullTime{},   // updatedAt
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(values ...interface{}) error {
	if m, n := len(values), len(user.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	u.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field username", values[0])
	} else if value.Valid {
		u.Username = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field password", values[1])
	} else if value.Valid {
		u.Password = value.String
	}
	if value, ok := values[2].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field initial", values[2])
	} else if value.Valid {
		u.Initial = value.Bool
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field oauser", values[3])
	} else if value.Valid {
		u.Oauser = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[4])
	} else if value.Valid {
		u.Name = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field telephone", values[5])
	} else if value.Valid {
		u.Telephone = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field email", values[6])
	} else if value.Valid {
		u.Email = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field avatar", values[7])
	} else if value.Valid {
		u.Avatar = value.String
	}
	if value, ok := values[8].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field super", values[8])
	} else if value.Valid {
		u.Super = value.Bool
	}
	if value, ok := values[9].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[9])
	} else if value.Valid {
		u.Status = int(value.Int64)
	}
	if value, ok := values[10].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field lastLogin", values[10])
	} else if value.Valid {
		u.LastLogin = value.Time
	}
	if value, ok := values[11].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[11])
	} else if value.Valid {
		u.CreatedAt = value.Time
	}
	if value, ok := values[12].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[12])
	} else if value.Valid {
		u.UpdatedAt = value.Time
	}
	return nil
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	builder.WriteString(", password=<sensitive>")
	builder.WriteString(", initial=")
	builder.WriteString(fmt.Sprintf("%v", u.Initial))
	builder.WriteString(", oauser=")
	builder.WriteString(u.Oauser)
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", telephone=")
	builder.WriteString(u.Telephone)
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", avatar=")
	builder.WriteString(u.Avatar)
	builder.WriteString(", super=")
	builder.WriteString(fmt.Sprintf("%v", u.Super))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteString(", lastLogin=")
	builder.WriteString(u.LastLogin.Format(time.ANSIC))
	builder.WriteString(", createdAt=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
