// Code generated by entc, DO NOT EDIT.

package project

import (
	"time"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProjectName holds the string denoting the projectname field in the database.
	FieldProjectName = "projectName"
	// FieldProType holds the string denoting the protype field in the database.
	FieldProType = "proType"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldGitlab holds the string denoting the gitlab field in the database.
	FieldGitlab = "gitlab"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// FieldDebugPort holds the string denoting the debugport field in the database.
	FieldDebugPort = "debugPort"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "createdAt"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updatedAt"

	// EdgeApplications holds the string denoting the applications edge name in mutations.
	EdgeApplications = "applications"

	// Table holds the table name of the project in the database.
	Table = "projects"
	// ApplicationsTable is the table the holds the applications relation/edge.
	ApplicationsTable = "applications"
	// ApplicationsInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationsInverseTable = "applications"
	// ApplicationsColumn is the table column denoting the applications relation/edge.
	ApplicationsColumn = "project_applications"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldProjectName,
	FieldProType,
	FieldDescription,
	FieldGitlab,
	FieldPort,
	FieldDebugPort,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the createdAt field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updatedAt field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updatedAt field.
	UpdateDefaultUpdatedAt func() time.Time
)
