// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/lingfohn/lime/ent/helmconfig"
)

// HelmConfigCreate is the builder for creating a HelmConfig entity.
type HelmConfigCreate struct {
	config
	mutation *HelmConfigMutation
	hooks    []Hook
}

// SetChartVersion sets the chartVersion field.
func (hcc *HelmConfigCreate) SetChartVersion(s string) *HelmConfigCreate {
	hcc.mutation.SetChartVersion(s)
	return hcc
}

// SetActive sets the active field.
func (hcc *HelmConfigCreate) SetActive(s string) *HelmConfigCreate {
	hcc.mutation.SetActive(s)
	return hcc
}

// SetEnableService sets the enableService field.
func (hcc *HelmConfigCreate) SetEnableService(b bool) *HelmConfigCreate {
	hcc.mutation.SetEnableService(b)
	return hcc
}

// SetNillableEnableService sets the enableService field if the given value is not nil.
func (hcc *HelmConfigCreate) SetNillableEnableService(b *bool) *HelmConfigCreate {
	if b != nil {
		hcc.SetEnableService(*b)
	}
	return hcc
}

// SetServiceType sets the serviceType field.
func (hcc *HelmConfigCreate) SetServiceType(s string) *HelmConfigCreate {
	hcc.mutation.SetServiceType(s)
	return hcc
}

// SetNillableServiceType sets the serviceType field if the given value is not nil.
func (hcc *HelmConfigCreate) SetNillableServiceType(s *string) *HelmConfigCreate {
	if s != nil {
		hcc.SetServiceType(*s)
	}
	return hcc
}

// SetNodePort sets the nodePort field.
func (hcc *HelmConfigCreate) SetNodePort(i int) *HelmConfigCreate {
	hcc.mutation.SetNodePort(i)
	return hcc
}

// SetLimitMem sets the limitMem field.
func (hcc *HelmConfigCreate) SetLimitMem(s string) *HelmConfigCreate {
	hcc.mutation.SetLimitMem(s)
	return hcc
}

// SetLimitCPU sets the limitCPU field.
func (hcc *HelmConfigCreate) SetLimitCPU(s string) *HelmConfigCreate {
	hcc.mutation.SetLimitCPU(s)
	return hcc
}

// SetReqCPU sets the reqCPU field.
func (hcc *HelmConfigCreate) SetReqCPU(s string) *HelmConfigCreate {
	hcc.mutation.SetReqCPU(s)
	return hcc
}

// SetReqMem sets the reqMem field.
func (hcc *HelmConfigCreate) SetReqMem(s string) *HelmConfigCreate {
	hcc.mutation.SetReqMem(s)
	return hcc
}

// SetCreatedAt sets the createdAt field.
func (hcc *HelmConfigCreate) SetCreatedAt(t time.Time) *HelmConfigCreate {
	hcc.mutation.SetCreatedAt(t)
	return hcc
}

// SetNillableCreatedAt sets the createdAt field if the given value is not nil.
func (hcc *HelmConfigCreate) SetNillableCreatedAt(t *time.Time) *HelmConfigCreate {
	if t != nil {
		hcc.SetCreatedAt(*t)
	}
	return hcc
}

// SetUpdatedAt sets the updatedAt field.
func (hcc *HelmConfigCreate) SetUpdatedAt(t time.Time) *HelmConfigCreate {
	hcc.mutation.SetUpdatedAt(t)
	return hcc
}

// SetNillableUpdatedAt sets the updatedAt field if the given value is not nil.
func (hcc *HelmConfigCreate) SetNillableUpdatedAt(t *time.Time) *HelmConfigCreate {
	if t != nil {
		hcc.SetUpdatedAt(*t)
	}
	return hcc
}

// Mutation returns the HelmConfigMutation object of the builder.
func (hcc *HelmConfigCreate) Mutation() *HelmConfigMutation {
	return hcc.mutation
}

// Save creates the HelmConfig in the database.
func (hcc *HelmConfigCreate) Save(ctx context.Context) (*HelmConfig, error) {
	var (
		err  error
		node *HelmConfig
	)
	hcc.defaults()
	if len(hcc.hooks) == 0 {
		if err = hcc.check(); err != nil {
			return nil, err
		}
		node, err = hcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HelmConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hcc.check(); err != nil {
				return nil, err
			}
			hcc.mutation = mutation
			node, err = hcc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hcc.hooks) - 1; i >= 0; i-- {
			mut = hcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (hcc *HelmConfigCreate) SaveX(ctx context.Context) *HelmConfig {
	v, err := hcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (hcc *HelmConfigCreate) defaults() {
	if _, ok := hcc.mutation.EnableService(); !ok {
		v := helmconfig.DefaultEnableService
		hcc.mutation.SetEnableService(v)
	}
	if _, ok := hcc.mutation.ServiceType(); !ok {
		v := helmconfig.DefaultServiceType
		hcc.mutation.SetServiceType(v)
	}
	if _, ok := hcc.mutation.CreatedAt(); !ok {
		v := helmconfig.DefaultCreatedAt()
		hcc.mutation.SetCreatedAt(v)
	}
	if _, ok := hcc.mutation.UpdatedAt(); !ok {
		v := helmconfig.DefaultUpdatedAt()
		hcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hcc *HelmConfigCreate) check() error {
	if _, ok := hcc.mutation.ChartVersion(); !ok {
		return &ValidationError{Name: "chartVersion", err: errors.New("ent: missing required field \"chartVersion\"")}
	}
	if _, ok := hcc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New("ent: missing required field \"active\"")}
	}
	if _, ok := hcc.mutation.EnableService(); !ok {
		return &ValidationError{Name: "enableService", err: errors.New("ent: missing required field \"enableService\"")}
	}
	if _, ok := hcc.mutation.ServiceType(); !ok {
		return &ValidationError{Name: "serviceType", err: errors.New("ent: missing required field \"serviceType\"")}
	}
	if _, ok := hcc.mutation.NodePort(); !ok {
		return &ValidationError{Name: "nodePort", err: errors.New("ent: missing required field \"nodePort\"")}
	}
	if _, ok := hcc.mutation.LimitMem(); !ok {
		return &ValidationError{Name: "limitMem", err: errors.New("ent: missing required field \"limitMem\"")}
	}
	if _, ok := hcc.mutation.LimitCPU(); !ok {
		return &ValidationError{Name: "limitCPU", err: errors.New("ent: missing required field \"limitCPU\"")}
	}
	if _, ok := hcc.mutation.ReqCPU(); !ok {
		return &ValidationError{Name: "reqCPU", err: errors.New("ent: missing required field \"reqCPU\"")}
	}
	if _, ok := hcc.mutation.ReqMem(); !ok {
		return &ValidationError{Name: "reqMem", err: errors.New("ent: missing required field \"reqMem\"")}
	}
	if _, ok := hcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := hcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	return nil
}

func (hcc *HelmConfigCreate) sqlSave(ctx context.Context) (*HelmConfig, error) {
	_node, _spec := hcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hcc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (hcc *HelmConfigCreate) createSpec() (*HelmConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &HelmConfig{config: hcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: helmconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: helmconfig.FieldID,
			},
		}
	)
	if value, ok := hcc.mutation.ChartVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldChartVersion,
		})
		_node.ChartVersion = value
	}
	if value, ok := hcc.mutation.Active(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldActive,
		})
		_node.Active = value
	}
	if value, ok := hcc.mutation.EnableService(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: helmconfig.FieldEnableService,
		})
		_node.EnableService = value
	}
	if value, ok := hcc.mutation.ServiceType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldServiceType,
		})
		_node.ServiceType = value
	}
	if value, ok := hcc.mutation.NodePort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helmconfig.FieldNodePort,
		})
		_node.NodePort = value
	}
	if value, ok := hcc.mutation.LimitMem(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldLimitMem,
		})
		_node.LimitMem = value
	}
	if value, ok := hcc.mutation.LimitCPU(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldLimitCPU,
		})
		_node.LimitCPU = value
	}
	if value, ok := hcc.mutation.ReqCPU(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldReqCPU,
		})
		_node.ReqCPU = value
	}
	if value, ok := hcc.mutation.ReqMem(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldReqMem,
		})
		_node.ReqMem = value
	}
	if value, ok := hcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: helmconfig.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := hcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: helmconfig.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// HelmConfigCreateBulk is the builder for creating a bulk of HelmConfig entities.
type HelmConfigCreateBulk struct {
	config
	builders []*HelmConfigCreate
}

// Save creates the HelmConfig entities in the database.
func (hccb *HelmConfigCreateBulk) Save(ctx context.Context) ([]*HelmConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hccb.builders))
	nodes := make([]*HelmConfig, len(hccb.builders))
	mutators := make([]Mutator, len(hccb.builders))
	for i := range hccb.builders {
		func(i int, root context.Context) {
			builder := hccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HelmConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (hccb *HelmConfigCreateBulk) SaveX(ctx context.Context) []*HelmConfig {
	v, err := hccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
