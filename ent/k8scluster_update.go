// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/lingfohn/lime/ent/k8scluster"
	"github.com/lingfohn/lime/ent/namespace"
	"github.com/lingfohn/lime/ent/predicate"
)

// K8sClusterUpdate is the builder for updating K8sCluster entities.
type K8sClusterUpdate struct {
	config
	hooks    []Hook
	mutation *K8sClusterMutation
}

// Where adds a new predicate for the builder.
func (kcu *K8sClusterUpdate) Where(ps ...predicate.K8sCluster) *K8sClusterUpdate {
	kcu.mutation.predicates = append(kcu.mutation.predicates, ps...)
	return kcu
}

// SetCluster sets the cluster field.
func (kcu *K8sClusterUpdate) SetCluster(s string) *K8sClusterUpdate {
	kcu.mutation.SetCluster(s)
	return kcu
}

// SetHelmApi sets the helmApi field.
func (kcu *K8sClusterUpdate) SetHelmApi(s string) *K8sClusterUpdate {
	kcu.mutation.SetHelmApi(s)
	return kcu
}

// SetAccessToken sets the accessToken field.
func (kcu *K8sClusterUpdate) SetAccessToken(s string) *K8sClusterUpdate {
	kcu.mutation.SetAccessToken(s)
	return kcu
}

// SetNillableAccessToken sets the accessToken field if the given value is not nil.
func (kcu *K8sClusterUpdate) SetNillableAccessToken(s *string) *K8sClusterUpdate {
	if s != nil {
		kcu.SetAccessToken(*s)
	}
	return kcu
}

// ClearAccessToken clears the value of accessToken.
func (kcu *K8sClusterUpdate) ClearAccessToken() *K8sClusterUpdate {
	kcu.mutation.ClearAccessToken()
	return kcu
}

// SetUpdatedAt sets the updatedAt field.
func (kcu *K8sClusterUpdate) SetUpdatedAt(t time.Time) *K8sClusterUpdate {
	kcu.mutation.SetUpdatedAt(t)
	return kcu
}

// AddNamespaceIDs adds the namespaces edge to Namespace by ids.
func (kcu *K8sClusterUpdate) AddNamespaceIDs(ids ...int) *K8sClusterUpdate {
	kcu.mutation.AddNamespaceIDs(ids...)
	return kcu
}

// AddNamespaces adds the namespaces edges to Namespace.
func (kcu *K8sClusterUpdate) AddNamespaces(n ...*Namespace) *K8sClusterUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return kcu.AddNamespaceIDs(ids...)
}

// Mutation returns the K8sClusterMutation object of the builder.
func (kcu *K8sClusterUpdate) Mutation() *K8sClusterMutation {
	return kcu.mutation
}

// ClearNamespaces clears all "namespaces" edges to type Namespace.
func (kcu *K8sClusterUpdate) ClearNamespaces() *K8sClusterUpdate {
	kcu.mutation.ClearNamespaces()
	return kcu
}

// RemoveNamespaceIDs removes the namespaces edge to Namespace by ids.
func (kcu *K8sClusterUpdate) RemoveNamespaceIDs(ids ...int) *K8sClusterUpdate {
	kcu.mutation.RemoveNamespaceIDs(ids...)
	return kcu
}

// RemoveNamespaces removes namespaces edges to Namespace.
func (kcu *K8sClusterUpdate) RemoveNamespaces(n ...*Namespace) *K8sClusterUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return kcu.RemoveNamespaceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kcu *K8sClusterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	kcu.defaults()
	if len(kcu.hooks) == 0 {
		affected, err = kcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sClusterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kcu.mutation = mutation
			affected, err = kcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kcu.hooks) - 1; i >= 0; i-- {
			mut = kcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcu *K8sClusterUpdate) SaveX(ctx context.Context) int {
	affected, err := kcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kcu *K8sClusterUpdate) Exec(ctx context.Context) error {
	_, err := kcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcu *K8sClusterUpdate) ExecX(ctx context.Context) {
	if err := kcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcu *K8sClusterUpdate) defaults() {
	if _, ok := kcu.mutation.UpdatedAt(); !ok {
		v := k8scluster.UpdateDefaultUpdatedAt()
		kcu.mutation.SetUpdatedAt(v)
	}
}

func (kcu *K8sClusterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8scluster.Table,
			Columns: k8scluster.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: k8scluster.FieldID,
			},
		},
	}
	if ps := kcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcu.mutation.Cluster(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8scluster.FieldCluster,
		})
	}
	if value, ok := kcu.mutation.HelmApi(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8scluster.FieldHelmApi,
		})
	}
	if value, ok := kcu.mutation.AccessToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8scluster.FieldAccessToken,
		})
	}
	if kcu.mutation.AccessTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: k8scluster.FieldAccessToken,
		})
	}
	if value, ok := kcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8scluster.FieldUpdatedAt,
		})
	}
	if kcu.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   k8scluster.NamespacesTable,
			Columns: []string{k8scluster.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: namespace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.RemovedNamespacesIDs(); len(nodes) > 0 && !kcu.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   k8scluster.NamespacesTable,
			Columns: []string{k8scluster.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.NamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   k8scluster.NamespacesTable,
			Columns: []string{k8scluster.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8scluster.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// K8sClusterUpdateOne is the builder for updating a single K8sCluster entity.
type K8sClusterUpdateOne struct {
	config
	hooks    []Hook
	mutation *K8sClusterMutation
}

// SetCluster sets the cluster field.
func (kcuo *K8sClusterUpdateOne) SetCluster(s string) *K8sClusterUpdateOne {
	kcuo.mutation.SetCluster(s)
	return kcuo
}

// SetHelmApi sets the helmApi field.
func (kcuo *K8sClusterUpdateOne) SetHelmApi(s string) *K8sClusterUpdateOne {
	kcuo.mutation.SetHelmApi(s)
	return kcuo
}

// SetAccessToken sets the accessToken field.
func (kcuo *K8sClusterUpdateOne) SetAccessToken(s string) *K8sClusterUpdateOne {
	kcuo.mutation.SetAccessToken(s)
	return kcuo
}

// SetNillableAccessToken sets the accessToken field if the given value is not nil.
func (kcuo *K8sClusterUpdateOne) SetNillableAccessToken(s *string) *K8sClusterUpdateOne {
	if s != nil {
		kcuo.SetAccessToken(*s)
	}
	return kcuo
}

// ClearAccessToken clears the value of accessToken.
func (kcuo *K8sClusterUpdateOne) ClearAccessToken() *K8sClusterUpdateOne {
	kcuo.mutation.ClearAccessToken()
	return kcuo
}

// SetUpdatedAt sets the updatedAt field.
func (kcuo *K8sClusterUpdateOne) SetUpdatedAt(t time.Time) *K8sClusterUpdateOne {
	kcuo.mutation.SetUpdatedAt(t)
	return kcuo
}

// AddNamespaceIDs adds the namespaces edge to Namespace by ids.
func (kcuo *K8sClusterUpdateOne) AddNamespaceIDs(ids ...int) *K8sClusterUpdateOne {
	kcuo.mutation.AddNamespaceIDs(ids...)
	return kcuo
}

// AddNamespaces adds the namespaces edges to Namespace.
func (kcuo *K8sClusterUpdateOne) AddNamespaces(n ...*Namespace) *K8sClusterUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return kcuo.AddNamespaceIDs(ids...)
}

// Mutation returns the K8sClusterMutation object of the builder.
func (kcuo *K8sClusterUpdateOne) Mutation() *K8sClusterMutation {
	return kcuo.mutation
}

// ClearNamespaces clears all "namespaces" edges to type Namespace.
func (kcuo *K8sClusterUpdateOne) ClearNamespaces() *K8sClusterUpdateOne {
	kcuo.mutation.ClearNamespaces()
	return kcuo
}

// RemoveNamespaceIDs removes the namespaces edge to Namespace by ids.
func (kcuo *K8sClusterUpdateOne) RemoveNamespaceIDs(ids ...int) *K8sClusterUpdateOne {
	kcuo.mutation.RemoveNamespaceIDs(ids...)
	return kcuo
}

// RemoveNamespaces removes namespaces edges to Namespace.
func (kcuo *K8sClusterUpdateOne) RemoveNamespaces(n ...*Namespace) *K8sClusterUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return kcuo.RemoveNamespaceIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (kcuo *K8sClusterUpdateOne) Save(ctx context.Context) (*K8sCluster, error) {
	var (
		err  error
		node *K8sCluster
	)
	kcuo.defaults()
	if len(kcuo.hooks) == 0 {
		node, err = kcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*K8sClusterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kcuo.mutation = mutation
			node, err = kcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kcuo.hooks) - 1; i >= 0; i-- {
			mut = kcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcuo *K8sClusterUpdateOne) SaveX(ctx context.Context) *K8sCluster {
	node, err := kcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kcuo *K8sClusterUpdateOne) Exec(ctx context.Context) error {
	_, err := kcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcuo *K8sClusterUpdateOne) ExecX(ctx context.Context) {
	if err := kcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcuo *K8sClusterUpdateOne) defaults() {
	if _, ok := kcuo.mutation.UpdatedAt(); !ok {
		v := k8scluster.UpdateDefaultUpdatedAt()
		kcuo.mutation.SetUpdatedAt(v)
	}
}

func (kcuo *K8sClusterUpdateOne) sqlSave(ctx context.Context) (_node *K8sCluster, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   k8scluster.Table,
			Columns: k8scluster.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: k8scluster.FieldID,
			},
		},
	}
	id, ok := kcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing K8sCluster.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := kcuo.mutation.Cluster(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8scluster.FieldCluster,
		})
	}
	if value, ok := kcuo.mutation.HelmApi(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8scluster.FieldHelmApi,
		})
	}
	if value, ok := kcuo.mutation.AccessToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: k8scluster.FieldAccessToken,
		})
	}
	if kcuo.mutation.AccessTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: k8scluster.FieldAccessToken,
		})
	}
	if value, ok := kcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: k8scluster.FieldUpdatedAt,
		})
	}
	if kcuo.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   k8scluster.NamespacesTable,
			Columns: []string{k8scluster.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: namespace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.RemovedNamespacesIDs(); len(nodes) > 0 && !kcuo.mutation.NamespacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   k8scluster.NamespacesTable,
			Columns: []string{k8scluster.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.NamespacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   k8scluster.NamespacesTable,
			Columns: []string{k8scluster.NamespacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: namespace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &K8sCluster{config: kcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, kcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{k8scluster.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
