// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/lingfohn/lime/ent/k8scluster"
	"github.com/lingfohn/lime/ent/namespace"
)

// Namespace is the model entity for the Namespace schema.
type Namespace struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// DockerRepo holds the value of the "dockerRepo" field.
	DockerRepo string `json:"dockerRepo"`
	// RepoNamespace holds the value of the "repoNamespace" field.
	RepoNamespace string `json:"repoNamespace"`
	// Active holds the value of the "active" field.
	Active string `json:"active"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NamespaceQuery when eager-loading is set.
	Edges                  NamespaceEdges `json:"edges"`
	k8s_cluster_namespaces *int
}

// NamespaceEdges holds the relations/edges for other nodes in the graph.
type NamespaceEdges struct {
	// Cluster holds the value of the cluster edge.
	Cluster *K8sCluster
	// Applications holds the value of the applications edge.
	Applications []*Application
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ClusterOrErr returns the Cluster value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NamespaceEdges) ClusterOrErr() (*K8sCluster, error) {
	if e.loadedTypes[0] {
		if e.Cluster == nil {
			// The edge cluster was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: k8scluster.Label}
		}
		return e.Cluster, nil
	}
	return nil, &NotLoadedError{edge: "cluster"}
}

// ApplicationsOrErr returns the Applications value or an error if the edge
// was not loaded in eager-loading.
func (e NamespaceEdges) ApplicationsOrErr() ([]*Application, error) {
	if e.loadedTypes[1] {
		return e.Applications, nil
	}
	return nil, &NotLoadedError{edge: "applications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Namespace) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // dockerRepo
		&sql.NullString{}, // repoNamespace
		&sql.NullString{}, // active
		&sql.NullTime{},   // createdAt
		&sql.NullTime{},   // updatedAt
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Namespace) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // k8s_cluster_namespaces
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Namespace fields.
func (n *Namespace) assignValues(values ...interface{}) error {
	if m, n := len(values), len(namespace.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	n.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		n.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field dockerRepo", values[1])
	} else if value.Valid {
		n.DockerRepo = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field repoNamespace", values[2])
	} else if value.Valid {
		n.RepoNamespace = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field active", values[3])
	} else if value.Valid {
		n.Active = value.String
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[4])
	} else if value.Valid {
		n.CreatedAt = value.Time
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[5])
	} else if value.Valid {
		n.UpdatedAt = value.Time
	}
	values = values[6:]
	if len(values) == len(namespace.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field k8s_cluster_namespaces", value)
		} else if value.Valid {
			n.k8s_cluster_namespaces = new(int)
			*n.k8s_cluster_namespaces = int(value.Int64)
		}
	}
	return nil
}

// QueryCluster queries the cluster edge of the Namespace.
func (n *Namespace) QueryCluster() *K8sClusterQuery {
	return (&NamespaceClient{config: n.config}).QueryCluster(n)
}

// QueryApplications queries the applications edge of the Namespace.
func (n *Namespace) QueryApplications() *ApplicationQuery {
	return (&NamespaceClient{config: n.config}).QueryApplications(n)
}

// Update returns a builder for updating this Namespace.
// Note that, you need to call Namespace.Unwrap() before calling this method, if this Namespace
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Namespace) Update() *NamespaceUpdateOne {
	return (&NamespaceClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (n *Namespace) Unwrap() *Namespace {
	tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Namespace is not a transactional entity")
	}
	n.config.driver = tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Namespace) String() string {
	var builder strings.Builder
	builder.WriteString("Namespace(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteString(", name=")
	builder.WriteString(n.Name)
	builder.WriteString(", dockerRepo=")
	builder.WriteString(n.DockerRepo)
	builder.WriteString(", repoNamespace=")
	builder.WriteString(n.RepoNamespace)
	builder.WriteString(", active=")
	builder.WriteString(n.Active)
	builder.WriteString(", createdAt=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Namespaces is a parsable slice of Namespace.
type Namespaces []*Namespace

func (n Namespaces) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
