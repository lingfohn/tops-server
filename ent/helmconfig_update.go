// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/lingfohn/lime/ent/helmconfig"
	"github.com/lingfohn/lime/ent/predicate"
)

// HelmConfigUpdate is the builder for updating HelmConfig entities.
type HelmConfigUpdate struct {
	config
	hooks    []Hook
	mutation *HelmConfigMutation
}

// Where adds a new predicate for the builder.
func (hcu *HelmConfigUpdate) Where(ps ...predicate.HelmConfig) *HelmConfigUpdate {
	hcu.mutation.predicates = append(hcu.mutation.predicates, ps...)
	return hcu
}

// SetChartVersion sets the chartVersion field.
func (hcu *HelmConfigUpdate) SetChartVersion(s string) *HelmConfigUpdate {
	hcu.mutation.SetChartVersion(s)
	return hcu
}

// SetActive sets the active field.
func (hcu *HelmConfigUpdate) SetActive(s string) *HelmConfigUpdate {
	hcu.mutation.SetActive(s)
	return hcu
}

// SetEnableService sets the enableService field.
func (hcu *HelmConfigUpdate) SetEnableService(b bool) *HelmConfigUpdate {
	hcu.mutation.SetEnableService(b)
	return hcu
}

// SetNillableEnableService sets the enableService field if the given value is not nil.
func (hcu *HelmConfigUpdate) SetNillableEnableService(b *bool) *HelmConfigUpdate {
	if b != nil {
		hcu.SetEnableService(*b)
	}
	return hcu
}

// SetServiceType sets the serviceType field.
func (hcu *HelmConfigUpdate) SetServiceType(s string) *HelmConfigUpdate {
	hcu.mutation.SetServiceType(s)
	return hcu
}

// SetNillableServiceType sets the serviceType field if the given value is not nil.
func (hcu *HelmConfigUpdate) SetNillableServiceType(s *string) *HelmConfigUpdate {
	if s != nil {
		hcu.SetServiceType(*s)
	}
	return hcu
}

// SetNodePort sets the nodePort field.
func (hcu *HelmConfigUpdate) SetNodePort(i int) *HelmConfigUpdate {
	hcu.mutation.ResetNodePort()
	hcu.mutation.SetNodePort(i)
	return hcu
}

// AddNodePort adds i to nodePort.
func (hcu *HelmConfigUpdate) AddNodePort(i int) *HelmConfigUpdate {
	hcu.mutation.AddNodePort(i)
	return hcu
}

// SetLimitMem sets the limitMem field.
func (hcu *HelmConfigUpdate) SetLimitMem(s string) *HelmConfigUpdate {
	hcu.mutation.SetLimitMem(s)
	return hcu
}

// SetLimitCPU sets the limitCPU field.
func (hcu *HelmConfigUpdate) SetLimitCPU(s string) *HelmConfigUpdate {
	hcu.mutation.SetLimitCPU(s)
	return hcu
}

// SetReqCPU sets the reqCPU field.
func (hcu *HelmConfigUpdate) SetReqCPU(s string) *HelmConfigUpdate {
	hcu.mutation.SetReqCPU(s)
	return hcu
}

// SetReqMem sets the reqMem field.
func (hcu *HelmConfigUpdate) SetReqMem(s string) *HelmConfigUpdate {
	hcu.mutation.SetReqMem(s)
	return hcu
}

// SetUpdatedAt sets the updatedAt field.
func (hcu *HelmConfigUpdate) SetUpdatedAt(t time.Time) *HelmConfigUpdate {
	hcu.mutation.SetUpdatedAt(t)
	return hcu
}

// Mutation returns the HelmConfigMutation object of the builder.
func (hcu *HelmConfigUpdate) Mutation() *HelmConfigMutation {
	return hcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hcu *HelmConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	hcu.defaults()
	if len(hcu.hooks) == 0 {
		affected, err = hcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HelmConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hcu.mutation = mutation
			affected, err = hcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hcu.hooks) - 1; i >= 0; i-- {
			mut = hcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hcu *HelmConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := hcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hcu *HelmConfigUpdate) Exec(ctx context.Context) error {
	_, err := hcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcu *HelmConfigUpdate) ExecX(ctx context.Context) {
	if err := hcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hcu *HelmConfigUpdate) defaults() {
	if _, ok := hcu.mutation.UpdatedAt(); !ok {
		v := helmconfig.UpdateDefaultUpdatedAt()
		hcu.mutation.SetUpdatedAt(v)
	}
}

func (hcu *HelmConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   helmconfig.Table,
			Columns: helmconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: helmconfig.FieldID,
			},
		},
	}
	if ps := hcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hcu.mutation.ChartVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldChartVersion,
		})
	}
	if value, ok := hcu.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldActive,
		})
	}
	if value, ok := hcu.mutation.EnableService(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: helmconfig.FieldEnableService,
		})
	}
	if value, ok := hcu.mutation.ServiceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldServiceType,
		})
	}
	if value, ok := hcu.mutation.NodePort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helmconfig.FieldNodePort,
		})
	}
	if value, ok := hcu.mutation.AddedNodePort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helmconfig.FieldNodePort,
		})
	}
	if value, ok := hcu.mutation.LimitMem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldLimitMem,
		})
	}
	if value, ok := hcu.mutation.LimitCPU(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldLimitCPU,
		})
	}
	if value, ok := hcu.mutation.ReqCPU(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldReqCPU,
		})
	}
	if value, ok := hcu.mutation.ReqMem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldReqMem,
		})
	}
	if value, ok := hcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: helmconfig.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{helmconfig.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// HelmConfigUpdateOne is the builder for updating a single HelmConfig entity.
type HelmConfigUpdateOne struct {
	config
	hooks    []Hook
	mutation *HelmConfigMutation
}

// SetChartVersion sets the chartVersion field.
func (hcuo *HelmConfigUpdateOne) SetChartVersion(s string) *HelmConfigUpdateOne {
	hcuo.mutation.SetChartVersion(s)
	return hcuo
}

// SetActive sets the active field.
func (hcuo *HelmConfigUpdateOne) SetActive(s string) *HelmConfigUpdateOne {
	hcuo.mutation.SetActive(s)
	return hcuo
}

// SetEnableService sets the enableService field.
func (hcuo *HelmConfigUpdateOne) SetEnableService(b bool) *HelmConfigUpdateOne {
	hcuo.mutation.SetEnableService(b)
	return hcuo
}

// SetNillableEnableService sets the enableService field if the given value is not nil.
func (hcuo *HelmConfigUpdateOne) SetNillableEnableService(b *bool) *HelmConfigUpdateOne {
	if b != nil {
		hcuo.SetEnableService(*b)
	}
	return hcuo
}

// SetServiceType sets the serviceType field.
func (hcuo *HelmConfigUpdateOne) SetServiceType(s string) *HelmConfigUpdateOne {
	hcuo.mutation.SetServiceType(s)
	return hcuo
}

// SetNillableServiceType sets the serviceType field if the given value is not nil.
func (hcuo *HelmConfigUpdateOne) SetNillableServiceType(s *string) *HelmConfigUpdateOne {
	if s != nil {
		hcuo.SetServiceType(*s)
	}
	return hcuo
}

// SetNodePort sets the nodePort field.
func (hcuo *HelmConfigUpdateOne) SetNodePort(i int) *HelmConfigUpdateOne {
	hcuo.mutation.ResetNodePort()
	hcuo.mutation.SetNodePort(i)
	return hcuo
}

// AddNodePort adds i to nodePort.
func (hcuo *HelmConfigUpdateOne) AddNodePort(i int) *HelmConfigUpdateOne {
	hcuo.mutation.AddNodePort(i)
	return hcuo
}

// SetLimitMem sets the limitMem field.
func (hcuo *HelmConfigUpdateOne) SetLimitMem(s string) *HelmConfigUpdateOne {
	hcuo.mutation.SetLimitMem(s)
	return hcuo
}

// SetLimitCPU sets the limitCPU field.
func (hcuo *HelmConfigUpdateOne) SetLimitCPU(s string) *HelmConfigUpdateOne {
	hcuo.mutation.SetLimitCPU(s)
	return hcuo
}

// SetReqCPU sets the reqCPU field.
func (hcuo *HelmConfigUpdateOne) SetReqCPU(s string) *HelmConfigUpdateOne {
	hcuo.mutation.SetReqCPU(s)
	return hcuo
}

// SetReqMem sets the reqMem field.
func (hcuo *HelmConfigUpdateOne) SetReqMem(s string) *HelmConfigUpdateOne {
	hcuo.mutation.SetReqMem(s)
	return hcuo
}

// SetUpdatedAt sets the updatedAt field.
func (hcuo *HelmConfigUpdateOne) SetUpdatedAt(t time.Time) *HelmConfigUpdateOne {
	hcuo.mutation.SetUpdatedAt(t)
	return hcuo
}

// Mutation returns the HelmConfigMutation object of the builder.
func (hcuo *HelmConfigUpdateOne) Mutation() *HelmConfigMutation {
	return hcuo.mutation
}

// Save executes the query and returns the updated entity.
func (hcuo *HelmConfigUpdateOne) Save(ctx context.Context) (*HelmConfig, error) {
	var (
		err  error
		node *HelmConfig
	)
	hcuo.defaults()
	if len(hcuo.hooks) == 0 {
		node, err = hcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HelmConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hcuo.mutation = mutation
			node, err = hcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hcuo.hooks) - 1; i >= 0; i-- {
			mut = hcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (hcuo *HelmConfigUpdateOne) SaveX(ctx context.Context) *HelmConfig {
	node, err := hcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hcuo *HelmConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := hcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcuo *HelmConfigUpdateOne) ExecX(ctx context.Context) {
	if err := hcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hcuo *HelmConfigUpdateOne) defaults() {
	if _, ok := hcuo.mutation.UpdatedAt(); !ok {
		v := helmconfig.UpdateDefaultUpdatedAt()
		hcuo.mutation.SetUpdatedAt(v)
	}
}

func (hcuo *HelmConfigUpdateOne) sqlSave(ctx context.Context) (_node *HelmConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   helmconfig.Table,
			Columns: helmconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: helmconfig.FieldID,
			},
		},
	}
	id, ok := hcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing HelmConfig.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := hcuo.mutation.ChartVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldChartVersion,
		})
	}
	if value, ok := hcuo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldActive,
		})
	}
	if value, ok := hcuo.mutation.EnableService(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: helmconfig.FieldEnableService,
		})
	}
	if value, ok := hcuo.mutation.ServiceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldServiceType,
		})
	}
	if value, ok := hcuo.mutation.NodePort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helmconfig.FieldNodePort,
		})
	}
	if value, ok := hcuo.mutation.AddedNodePort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: helmconfig.FieldNodePort,
		})
	}
	if value, ok := hcuo.mutation.LimitMem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldLimitMem,
		})
	}
	if value, ok := hcuo.mutation.LimitCPU(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldLimitCPU,
		})
	}
	if value, ok := hcuo.mutation.ReqCPU(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldReqCPU,
		})
	}
	if value, ok := hcuo.mutation.ReqMem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: helmconfig.FieldReqMem,
		})
	}
	if value, ok := hcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: helmconfig.FieldUpdatedAt,
		})
	}
	_node = &HelmConfig{config: hcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, hcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{helmconfig.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
